victim
:code:
{'fields': {}, 'methods': {'handleEvent': '                public void handleEvent(ServiceController<?> controller, LifecycleEvent event) {\n                    switch (event) {\n                        case UP: {\n                            latch2.countDown();\n                            break;\n                        }\n                        case FAILED: {\n                            latch2.countDown();\n                            fail("Did not install store service - " + controller.getStartException().getMessage());\n                            break;\n                        }\n                        default:\n                            break;\n                    }\n                }\n', 'setup': 'public void setup() throws Exception {\n    container = ServiceContainer.Factory.create();\n    installOwnerService(OWNER_FOO);\n    installOwnerService(OWNER_BAR);\n    final CountDownLatch latch2 = new CountDownLatch(1);\n    final NamingStoreService namingStoreService = new NamingStoreService();\n    container.addService(ContextNames.JAVA_CONTEXT_SERVICE_NAME, namingStoreService)\n            .setInitialMode(ServiceController.Mode.ACTIVE)\n            .addListener(new LifecycleListener() {\n                public void handleEvent(ServiceController<?> controller, LifecycleEvent event) {\n                    switch (event) {\n                        case UP: {\n                            latch2.countDown();\n                            break;\n                        }\n                        case FAILED: {\n                            latch2.countDown();\n                            fail("Did not install store service - " + controller.getStartException().getMessage());\n                            break;\n                        }\n                        default:\n                            break;\n                    }\n                }\n            })\n            .install();\n    latch2.await(10, TimeUnit.SECONDS);\n    store = (WritableServiceBasedNamingStore) namingStoreService.getValue();\n}\n', 'testPermissions': 'public void testPermissions() throws Exception {\n\n    // rest of the code\n\n    // Reset the store object to its initial state\n    store = new WritableServiceBasedNamingStore(container, ServiceName.JBOSS, null);\n}\n', 'setupServiceContainer': 'public void setupServiceContainer() {\n    container = ServiceContainer.Factory.create();\n    store = new WritableServiceBasedNamingStore(container, ServiceName.JBOSS, null);\n}\n'}}victim
:import:
[]victim
:pom:
victim
:toreplace:
{'field_names': [], 'method_names': ['handleEvent', 'setup', 'testPermissions', 'setupServiceContainer']}polluter
:code:
{'fields': {}, 'methods': {'handleEvent': '                public void handleEvent(ServiceController<?> controller, LifecycleEvent event) {\n                    switch (event) {\n                        case UP: {\n                            latch2.countDown();\n                            break;\n                        }\n                        case FAILED: {\n                            latch2.countDown();\n                            fail("Did not install store service - " + controller.getStartException().getMessage());\n                            break;\n                        }\n                        default:\n                            break;\n                    }\n                }\n', 'setup': 'public void setup() throws Exception {\n    container = ServiceContainer.Factory.create();\n    installOwnerService(OWNER_FOO);\n    installOwnerService(OWNER_BAR);\n    final CountDownLatch latch2 = new CountDownLatch(1);\n    final NamingStoreService namingStoreService = new NamingStoreService();\n    container.addService(ContextNames.JAVA_CONTEXT_SERVICE_NAME, namingStoreService)\n            .setInitialMode(ServiceController.Mode.ACTIVE)\n            .addListener(new LifecycleListener() {\n                public void handleEvent(ServiceController<?> controller, LifecycleEvent event) {\n                    switch (event) {\n                        case UP: {\n                            latch2.countDown();\n                            break;\n                        }\n                        case FAILED: {\n                            latch2.countDown();\n                            fail("Did not install store service - " + controller.getStartException().getMessage());\n                            break;\n                        }\n                        default:\n                            break;\n                    }\n                }\n            })\n            .install();\n    latch2.await(10, TimeUnit.SECONDS);\n    store = (WritableServiceBasedNamingStore) namingStoreService.getValue();\n}\n', 'testPermissions': 'public void testPermissions() throws Exception {\n\n    // rest of the code\n\n    // Reset the store object to its initial state\n    store = new WritableServiceBasedNamingStore(container, ServiceName.JBOSS, null);\n}\n', 'setupServiceContainer': 'public void setupServiceContainer() {\n    container = ServiceContainer.Factory.create();\n    store = new WritableServiceBasedNamingStore(container, ServiceName.JBOSS, null);\n}\n'}}polluter
:import:
[]polluter
:pom:
polluter
:toreplace:
{'field_names': [], 'method_names': ['handleEvent', 'setup', 'testPermissions', 'setupServiceContainer']}