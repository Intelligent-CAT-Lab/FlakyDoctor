victim
:code:
{'fields': {}, 'methods': {'testFindAndSetAttributesObserves': 'public void testFindAndSetAttributesObserves() {\n   JavaSourceFactory javaSourceFactory = JavaSourceFactory.getInstance();\n   JavaSource localJavaSource = javaSourceFactory.newJavaSource("SnapshotEscalator");\n\n   String sourceCode = TestDataProvider.getTestSourceCodeBeforeBody()\n           + "public void escalate(@Observes @Severity(Severity.Level.HEARTBEAT) Snapshot current) {\\n"\n           + "List<Script> scripts = this.scripting.activeScripts();\\n"\n           + "try {\\n"\n           + "Bindings binding = this.scriptEngine.createBindings();\\n"\n           + "binding.put(\\"current\\", current);\\n"\n           + "Snapshot recent = this.recentSnapshots.get(current.getInstanceName());\\n"\n           + "binding.put(\\"previous\\", recent);\\n"\n           + "long start = System.currentTimeMillis();\\n"\n           + "} catch (Exception e) {\\n"\n           + "throw new IllegalStateException(\\"Exception during script evaluation: \\" + e, e);\\n"\n           + "}\\n"\n           + "}\\n";\n\n   if(localJavaSource != null) {\n       localJavaSource.setSourceCode(sourceCode);\n       examiner.examine(localJavaSource);\n       Dependency dependency = DependencyContainer.getInstance().getDependencies(localJavaSource).get(0);\n       assertEquals(1, DependencyContainer.getInstance().getDependencies(localJavaSource).size());\n\n       assertEquals(DependencyType.OBSERVES, dependency.getDependencyType());\n       assertEquals("SnapshotEscalator", dependency.getJavaSourceFrom().getName());\n       assertEquals("Snapshot", dependency.getJavaSourceTo().getName());\n   }\n}\n'}}victim
:import:
[]victim
:pom:
victim
:toreplace:
{'field_names': [], 'method_names': ['testFindAndSetAttributesObserves']}polluter
:code:
{'fields': {}, 'methods': {'testFindAndSetAttributesObserves': 'public void testFindAndSetAttributesObserves() {\n   JavaSourceFactory javaSourceFactory = JavaSourceFactory.getInstance();\n   JavaSource localJavaSource = javaSourceFactory.newJavaSource("SnapshotEscalator");\n\n   String sourceCode = TestDataProvider.getTestSourceCodeBeforeBody()\n           + "public void escalate(@Observes @Severity(Severity.Level.HEARTBEAT) Snapshot current) {\\n"\n           + "List<Script> scripts = this.scripting.activeScripts();\\n"\n           + "try {\\n"\n           + "Bindings binding = this.scriptEngine.createBindings();\\n"\n           + "binding.put(\\"current\\", current);\\n"\n           + "Snapshot recent = this.recentSnapshots.get(current.getInstanceName());\\n"\n           + "binding.put(\\"previous\\", recent);\\n"\n           + "long start = System.currentTimeMillis();\\n"\n           + "} catch (Exception e) {\\n"\n           + "throw new IllegalStateException(\\"Exception during script evaluation: \\" + e, e);\\n"\n           + "}\\n"\n           + "}\\n";\n\n   if(localJavaSource != null) {\n       localJavaSource.setSourceCode(sourceCode);\n       examiner.examine(localJavaSource);\n       Dependency dependency = DependencyContainer.getInstance().getDependencies(localJavaSource).get(0);\n       assertEquals(1, DependencyContainer.getInstance().getDependencies(localJavaSource).size());\n\n       assertEquals(DependencyType.OBSERVES, dependency.getDependencyType());\n       assertEquals("SnapshotEscalator", dependency.getJavaSourceFrom().getName());\n       assertEquals("Snapshot", dependency.getJavaSourceTo().getName());\n   }\n}\n'}}polluter
:import:
[]polluter
:pom:
polluter
:toreplace:
{'field_names': [], 'method_names': ['testFindAndSetAttributesObserves']}