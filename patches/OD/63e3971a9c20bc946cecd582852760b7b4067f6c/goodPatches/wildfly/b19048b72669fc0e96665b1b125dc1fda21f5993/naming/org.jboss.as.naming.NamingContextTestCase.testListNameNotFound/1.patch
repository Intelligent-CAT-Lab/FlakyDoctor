victim
:code:
{'fields': {}, 'methods': {'testListNameNotFound': 'public void testListNameNotFound() throws Exception {\n    \n\n    // Reset the namingContext object to its initial state before executing the test\n    namingContext = new NamingContext(namingStore, null);\n    \n\n\n    try {\n        namingContext.list(new CompositeName("test"));\n        fail("Should have thrown and NameNotFoundException");\n    } catch (NameNotFoundException expected) {\n    }\n\n    //the same with security permissions\n    try {\n        testActionPermission(JndiPermission.ACTION_LIST, namingContext, "test");\n        fail("Should have thrown and NameNotFoundException with appropriate permissions");\n    } catch (NameNotFoundException expected) {\n    }\n}\n', 'testPermissions': 'public void testPermissions() throws Exception {\n    final NamingContext namingContext = new NamingContext(store, null);\n    final String name = "a/b";\n    final Object value = new Object();\n    ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();\n\n    // simple bind test, note that permission must have absolute path\n    WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);\n    try {\n        permissions.add(new JndiPermission(store.getBaseName()+"/"+name,"bind,list,listBindings"));\n        store.bind(new CompositeName(name), value);\n    } finally {\n        WritableServiceBasedNamingStore.popOwner();\n    }\n\n    // Rest of the code...\n}\n'}}victim
:import:
[]victim
:pom:
victim
:toreplace:
{'field_names': [], 'method_names': ['testListNameNotFound', 'testPermissions']}polluter
:code:
{'fields': {}, 'methods': {'testListNameNotFound': 'public void testListNameNotFound() throws Exception {\n    \n\n    // Reset the namingContext object to its initial state before executing the test\n    namingContext = new NamingContext(namingStore, null);\n    \n\n\n    try {\n        namingContext.list(new CompositeName("test"));\n        fail("Should have thrown and NameNotFoundException");\n    } catch (NameNotFoundException expected) {\n    }\n\n    //the same with security permissions\n    try {\n        testActionPermission(JndiPermission.ACTION_LIST, namingContext, "test");\n        fail("Should have thrown and NameNotFoundException with appropriate permissions");\n    } catch (NameNotFoundException expected) {\n    }\n}\n', 'testPermissions': 'public void testPermissions() throws Exception {\n    final NamingContext namingContext = new NamingContext(store, null);\n    final String name = "a/b";\n    final Object value = new Object();\n    ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();\n\n    // simple bind test, note that permission must have absolute path\n    WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);\n    try {\n        permissions.add(new JndiPermission(store.getBaseName()+"/"+name,"bind,list,listBindings"));\n        store.bind(new CompositeName(name), value);\n    } finally {\n        WritableServiceBasedNamingStore.popOwner();\n    }\n\n    // Rest of the code...\n}\n'}}polluter
:import:
[]polluter
:pom:
polluter
:toreplace:
{'field_names': [], 'method_names': ['testListNameNotFound', 'testPermissions']}