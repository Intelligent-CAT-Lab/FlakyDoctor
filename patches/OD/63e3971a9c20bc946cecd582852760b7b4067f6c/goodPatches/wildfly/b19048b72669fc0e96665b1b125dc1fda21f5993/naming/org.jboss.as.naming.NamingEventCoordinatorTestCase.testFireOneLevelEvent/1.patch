victim
:code:
{'fields': {}, 'methods': {'testFireOneLevelEvent': 'public void testFireOneLevelEvent() throws Exception {\n    \n\n    // Reset the shared state before the test\n    NamingContext.setActiveNamingStore(new InMemoryNamingStore());\n    \n\n\n    final NamingEventCoordinator coordinator = new NamingEventCoordinator();\n\n    final CollectingListener objectListener = new CollectingListener(0);\n    coordinator.addListener("test/path", EventContext.OBJECT_SCOPE, objectListener);\n    final CollectingListener subtreeListener = new CollectingListener(0);\n    coordinator.addListener("test", EventContext.SUBTREE_SCOPE, subtreeListener);\n    final CollectingListener oneLevelListener = new CollectingListener(1);\n    coordinator.addListener("test", EventContext.ONELEVEL_SCOPE, oneLevelListener);\n\n    coordinator.fireEvent(context, new CompositeName("test/path"), null, null, NamingEvent.OBJECT_ADDED, "bind", EventContext.ONELEVEL_SCOPE);\n\n    oneLevelListener.latch.await(1, TimeUnit.SECONDS);\n\n    assertTrue(objectListener.capturedEvents.isEmpty());\n    assertTrue(subtreeListener.capturedEvents.isEmpty());\n    assertEquals(1, oneLevelListener.capturedEvents.size());\n}\n', 'testPermissions': 'public void testPermissions() throws Exception {\n\n    final NamingContext namingContext = new NamingContext(store, null);\n    final String name = "a/b";\n    final Object value = new Object();\n    ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();\n\n    // simple bind test, note that permission must have absolute path\n    WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);\n    try {\n        permissions.add(new JndiPermission(store.getBaseName()+"/"+name,"bind,list,listBindings"));\n        store.bind(new CompositeName(name), value);\n    } finally {\n        WritableServiceBasedNamingStore.popOwner();\n    }\n\n    // Rest of the code...\n\n    \n\n    // Reset the shared state after the test\n    NamingContext.setActiveNamingStore(null);\n    \n\n}\n'}}victim
:import:
[]victim
:pom:
victim
:toreplace:
{'field_names': [], 'method_names': ['testFireOneLevelEvent', 'testPermissions']}polluter
:code:
{'fields': {}, 'methods': {'testFireOneLevelEvent': 'public void testFireOneLevelEvent() throws Exception {\n    \n\n    // Reset the shared state before the test\n    NamingContext.setActiveNamingStore(new InMemoryNamingStore());\n    \n\n\n    final NamingEventCoordinator coordinator = new NamingEventCoordinator();\n\n    final CollectingListener objectListener = new CollectingListener(0);\n    coordinator.addListener("test/path", EventContext.OBJECT_SCOPE, objectListener);\n    final CollectingListener subtreeListener = new CollectingListener(0);\n    coordinator.addListener("test", EventContext.SUBTREE_SCOPE, subtreeListener);\n    final CollectingListener oneLevelListener = new CollectingListener(1);\n    coordinator.addListener("test", EventContext.ONELEVEL_SCOPE, oneLevelListener);\n\n    coordinator.fireEvent(context, new CompositeName("test/path"), null, null, NamingEvent.OBJECT_ADDED, "bind", EventContext.ONELEVEL_SCOPE);\n\n    oneLevelListener.latch.await(1, TimeUnit.SECONDS);\n\n    assertTrue(objectListener.capturedEvents.isEmpty());\n    assertTrue(subtreeListener.capturedEvents.isEmpty());\n    assertEquals(1, oneLevelListener.capturedEvents.size());\n}\n', 'testPermissions': 'public void testPermissions() throws Exception {\n\n    final NamingContext namingContext = new NamingContext(store, null);\n    final String name = "a/b";\n    final Object value = new Object();\n    ArrayList<JndiPermission> permissions = new ArrayList<JndiPermission>();\n\n    // simple bind test, note that permission must have absolute path\n    WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);\n    try {\n        permissions.add(new JndiPermission(store.getBaseName()+"/"+name,"bind,list,listBindings"));\n        store.bind(new CompositeName(name), value);\n    } finally {\n        WritableServiceBasedNamingStore.popOwner();\n    }\n\n    // Rest of the code...\n\n    \n\n    // Reset the shared state after the test\n    NamingContext.setActiveNamingStore(null);\n    \n\n}\n'}}polluter
:import:
[]polluter
:pom:
polluter
:toreplace:
{'field_names': [], 'method_names': ['testFireOneLevelEvent', 'testPermissions']}