victim
:code:
{'fields': {}, 'methods': {'testCreateWithIncorrectOrder': 'public void testCreateWithIncorrectOrder() {\n    SentenceFactory sf = SentenceFactory.getInstance();\n    AISMessageFactory amf = AISMessageFactory.getInstance();\n\n    String s2_1 = "!AIVDM,2,1,9,B,53nFBv01SJ<thHp6220H4heHTf2222222222221?50:454o<`9QSlUDp,0*09";\n    String s2_2 = "!AIVDM,2,2,9,B,888888888888880,2*2E";\n\n    AISSentence split1 = (AISSentence) sf.createParser(s2_1);\n    AISSentence split2 = (AISSentence) sf.createParser(s2_2);\n\n    try {\n        amf.create(split2, split1);\n        fail("AISMessageFactory didn\'t throw on incorrect order");\n    } catch (IllegalArgumentException iae) {\n        assertEquals("Incorrect order of AIS sentences", iae.getMessage());\n    } catch (Exception e) {\n        fail("Unexpected exception thrown from AISMessageFactory");\n    } finally {\n        sf.reset();\n    }\n}\n', 'setUp': 'public void setUp() throws Exception {\n    SentenceFactory sf = SentenceFactory.getInstance();\n    sf.reset();\n}\n', 'testRegisterParserWithAlternativeBeginChar': 'public void testRegisterParserWithAlternativeBeginChar() {\n    SentenceFactory sf = SentenceFactory.getInstance();\n\n    try {\n        sf.registerParser("VDM", VDMParser.class);\n        assertTrue(sf.hasParser("VDM"));\n    } catch (Exception e) {\n        fail("parser registering failed");\n    }\n\n    Sentence s = sf.createParser("!AIVDM,1,2,3");\n    assertNotNull(s);\n    assertTrue(s instanceof Sentence);\n    assertTrue(s instanceof SentenceParser);\n    assertTrue(s instanceof VDMParser);\n    sf.unregisterParser(VDMParser.class);\n    assertFalse(sf.hasParser("VDM"));\n\n    sf.reset();\n}\n'}}victim
:import:
[]victim
:pom:
victim
:toreplace:
{'field_names': [], 'method_names': ['testCreateWithIncorrectOrder', 'setUp', 'testRegisterParserWithAlternativeBeginChar']}polluter
:code:
{'fields': {}, 'methods': {'testCreateWithIncorrectOrder': 'public void testCreateWithIncorrectOrder() {\n    SentenceFactory sf = SentenceFactory.getInstance();\n    AISMessageFactory amf = AISMessageFactory.getInstance();\n\n    String s2_1 = "!AIVDM,2,1,9,B,53nFBv01SJ<thHp6220H4heHTf2222222222221?50:454o<`9QSlUDp,0*09";\n    String s2_2 = "!AIVDM,2,2,9,B,888888888888880,2*2E";\n\n    AISSentence split1 = (AISSentence) sf.createParser(s2_1);\n    AISSentence split2 = (AISSentence) sf.createParser(s2_2);\n\n    try {\n        amf.create(split2, split1);\n        fail("AISMessageFactory didn\'t throw on incorrect order");\n    } catch (IllegalArgumentException iae) {\n        assertEquals("Incorrect order of AIS sentences", iae.getMessage());\n    } catch (Exception e) {\n        fail("Unexpected exception thrown from AISMessageFactory");\n    } finally {\n        sf.reset();\n    }\n}\n', 'setUp': 'public void setUp() throws Exception {\n    SentenceFactory sf = SentenceFactory.getInstance();\n    sf.reset();\n}\n', 'testRegisterParserWithAlternativeBeginChar': 'public void testRegisterParserWithAlternativeBeginChar() {\n    SentenceFactory sf = SentenceFactory.getInstance();\n\n    try {\n        sf.registerParser("VDM", VDMParser.class);\n        assertTrue(sf.hasParser("VDM"));\n    } catch (Exception e) {\n        fail("parser registering failed");\n    }\n\n    Sentence s = sf.createParser("!AIVDM,1,2,3");\n    assertNotNull(s);\n    assertTrue(s instanceof Sentence);\n    assertTrue(s instanceof SentenceParser);\n    assertTrue(s instanceof VDMParser);\n    sf.unregisterParser(VDMParser.class);\n    assertFalse(sf.hasParser("VDM"));\n\n    sf.reset();\n}\n'}}polluter
:import:
[]polluter
:pom:
polluter
:toreplace:
{'field_names': [], 'method_names': ['testCreateWithIncorrectOrder', 'setUp', 'testRegisterParserWithAlternativeBeginChar']}