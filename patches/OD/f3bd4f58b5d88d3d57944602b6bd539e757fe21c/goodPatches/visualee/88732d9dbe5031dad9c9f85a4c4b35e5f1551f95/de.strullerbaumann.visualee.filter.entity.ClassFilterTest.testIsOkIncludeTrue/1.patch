victim
:code:
{'fields': {}, 'methods': {'testIsOkIncludeFalse': 'public void testIsOkIncludeFalse() {\n   \n\n   FilterContainer.getInstance().clear();\n   \n\n\n   ClassFilter filter = new ClassFilter();\n   filter.setFilterToken("XYZDatabaseProducer");\n   filter.setExclude(false);\n   FilterContainer.getInstance().add(filter);\n\n   assertEquals(false, FilterContainer.getInstance().isOk(javaSource));\n}\n', 'testIsOkIncludeTrue': 'public void testIsOkIncludeTrue() {\n   \n\n   FilterContainer.getInstance().clear();\n   \n\n\n   ClassFilter filter = new ClassFilter();\n   filter.setFilterToken("DatabaseProducer");\n   filter.setExclude(false);\n   FilterContainer.getInstance().add(filter);\n\n   assertEquals(true, FilterContainer.getInstance().isOk(javaSource));\n}\n'}}victim
:import:
[]victim
:pom:
victim
:toreplace:
{'field_names': [], 'method_names': ['testIsOkIncludeFalse', 'testIsOkIncludeTrue']}polluter
:code:
{'fields': {}, 'methods': {'testIsOkIncludeFalse': 'public void testIsOkIncludeFalse() {\n   \n\n   FilterContainer.getInstance().clear();\n   \n\n\n   ClassFilter filter = new ClassFilter();\n   filter.setFilterToken("XYZDatabaseProducer");\n   filter.setExclude(false);\n   FilterContainer.getInstance().add(filter);\n\n   assertEquals(false, FilterContainer.getInstance().isOk(javaSource));\n}\n', 'testIsOkIncludeTrue': 'public void testIsOkIncludeTrue() {\n   \n\n   FilterContainer.getInstance().clear();\n   \n\n\n   ClassFilter filter = new ClassFilter();\n   filter.setFilterToken("DatabaseProducer");\n   filter.setExclude(false);\n   FilterContainer.getInstance().add(filter);\n\n   assertEquals(true, FilterContainer.getInstance().isOk(javaSource));\n}\n'}}polluter
:import:
[]polluter
:pom:
polluter
:toreplace:
{'field_names': [], 'method_names': ['testIsOkIncludeFalse', 'testIsOkIncludeTrue']}