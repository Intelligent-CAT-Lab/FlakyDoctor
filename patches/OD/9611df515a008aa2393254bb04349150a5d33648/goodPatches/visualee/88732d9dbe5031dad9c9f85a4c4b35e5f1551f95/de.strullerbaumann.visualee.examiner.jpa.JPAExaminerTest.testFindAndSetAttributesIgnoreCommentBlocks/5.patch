victim
:code:
{'fields': {}, 'methods': {'testIsOkIncludeTrue': 'public void testIsOkIncludeTrue() {\n    SourcecodeFilter filter = new SourcecodeFilter();\n    filter.setFilterToken("EntityManager");\n    filter.setExclude(false);\n    FilterContainer.getInstance().add(filter);\n\n    JavaSource javaSource = JavaSourceFactory.getInstance().newJavaSource("DatabaseProducer");\n    String sourceCode = "package org.agoncal.application.petstore.util;\\n"\n            + "\\n"\n            + "\\n"\n            + "\\n"\n            + "@Produces\\n"\n            + "    @PersistenceContext(unitName = \\"applicationPetstorePU\\")\\n"\n            + "    private EntityManager em;\\n"\n            + "}\\n";\n\n    if(javaSource != null) {\n        javaSource.setSourceCode(sourceCode);\n        assertEquals(true, FilterContainer.getInstance().isOk(javaSource));\n    }\n}\n', 'testFindAndSetAttributesIgnoreCommentBlocks': 'public void testFindAndSetAttributesIgnoreCommentBlocks() {\n    ExaminerJPA jpaExaminer = new ExaminerJPA();\n    JavaSource javaSource = JavaSourceFactory.getInstance().newJavaSource("CocktailModel");\n    String sourceCode;\n\n    sourceCode = "@Model\\n"\n            + "{\\n"\n            + "  private List<Cocktail>     nonAlcoholicCocktails;\\n"\n            + "  private List<Cocktail>     alcoholicCocktails;\\n"\n            + "  /*\\n"\n            + "  @Inject\\n"\n            + "  private CocktailRepository cocktailRepository;\\n"\n            + "    */\\n"\n            + "  public List<Cocktail> getNonAlcoholicCocktails()\\n"\n            + "{\\n"\n            + "return this.nonAlcoholicCocktails;\\n"\n            + "}\\n";\n\n    if(javaSource != null) {\n        javaSource.setSourceCode(sourceCode);\n        jpaExaminer.examine(javaSource);\n        assertEquals(0, DependencyContainer.getInstance().getDependencies(javaSource).size());\n    }\n}\n'}}victim
:import:
[]victim
:pom:
victim
:toreplace:
{'field_names': [], 'method_names': ['testIsOkIncludeTrue', 'testFindAndSetAttributesIgnoreCommentBlocks']}polluter
:code:
{'fields': {}, 'methods': {'testIsOkIncludeTrue': 'public void testIsOkIncludeTrue() {\n    SourcecodeFilter filter = new SourcecodeFilter();\n    filter.setFilterToken("EntityManager");\n    filter.setExclude(false);\n    FilterContainer.getInstance().add(filter);\n\n    JavaSource javaSource = JavaSourceFactory.getInstance().newJavaSource("DatabaseProducer");\n    String sourceCode = "package org.agoncal.application.petstore.util;\\n"\n            + "\\n"\n            + "\\n"\n            + "\\n"\n            + "@Produces\\n"\n            + "    @PersistenceContext(unitName = \\"applicationPetstorePU\\")\\n"\n            + "    private EntityManager em;\\n"\n            + "}\\n";\n\n    if(javaSource != null) {\n        javaSource.setSourceCode(sourceCode);\n        assertEquals(true, FilterContainer.getInstance().isOk(javaSource));\n    }\n}\n', 'testFindAndSetAttributesIgnoreCommentBlocks': 'public void testFindAndSetAttributesIgnoreCommentBlocks() {\n    ExaminerJPA jpaExaminer = new ExaminerJPA();\n    JavaSource javaSource = JavaSourceFactory.getInstance().newJavaSource("CocktailModel");\n    String sourceCode;\n\n    sourceCode = "@Model\\n"\n            + "{\\n"\n            + "  private List<Cocktail>     nonAlcoholicCocktails;\\n"\n            + "  private List<Cocktail>     alcoholicCocktails;\\n"\n            + "  /*\\n"\n            + "  @Inject\\n"\n            + "  private CocktailRepository cocktailRepository;\\n"\n            + "    */\\n"\n            + "  public List<Cocktail> getNonAlcoholicCocktails()\\n"\n            + "{\\n"\n            + "return this.nonAlcoholicCocktails;\\n"\n            + "}\\n";\n\n    if(javaSource != null) {\n        javaSource.setSourceCode(sourceCode);\n        jpaExaminer.examine(javaSource);\n        assertEquals(0, DependencyContainer.getInstance().getDependencies(javaSource).size());\n    }\n}\n'}}polluter
:import:
[]polluter
:pom:
polluter
:toreplace:
{'field_names': [], 'method_names': ['testIsOkIncludeTrue', 'testFindAndSetAttributesIgnoreCommentBlocks']}