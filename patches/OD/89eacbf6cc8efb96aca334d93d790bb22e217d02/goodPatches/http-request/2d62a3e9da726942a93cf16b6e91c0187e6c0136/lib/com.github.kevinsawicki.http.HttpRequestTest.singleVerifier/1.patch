victim
:code:
{'fields': {}, 'methods': {'handle': '@Override    public void handle(Request request, HttpServletResponse response) {\n      response.setStatus(HTTP_OK);\n    }\n', 'create': '    public HttpURLConnection create(URL otherUrl) throws IOException {\n      return (HttpURLConnection) new URL(url).openConnection();\n    }\n', 'customConnectionFactory': 'public void customConnectionFactory() throws Exception {\n  handler = new RequestHandler() {\n\n    @Override\n    public void handle(Request request, HttpServletResponse response) {\n      response.setStatus(HTTP_OK);\n    }\n  };\n\n  ConnectionFactory factory = new ConnectionFactory() {\n\n    public HttpURLConnection create(URL otherUrl) throws IOException {\n      return (HttpURLConnection) new URL(url).openConnection();\n    }\n\n    public HttpURLConnection create(URL url, Proxy proxy) throws IOException {\n      throw new IOException();\n    }\n  };\n\n  HttpRequest.setConnectionFactory(factory);\n  int code = get("http://not/a/real/url").code();\n  assertEquals(200, code);\n\n  \n\n  // Reset the ConnectionFactory to its default state\n  HttpRequest.setConnectionFactory(null);\n  \n\n}\n'}}victim
:import:
[]victim
:pom:
victim
:toreplace:
{'field_names': [], 'method_names': ['handle', 'create', 'customConnectionFactory']}polluter
:code:
{'fields': {}, 'methods': {'handle': '@Override    public void handle(Request request, HttpServletResponse response) {\n      response.setStatus(HTTP_OK);\n    }\n', 'create': '    public HttpURLConnection create(URL otherUrl) throws IOException {\n      return (HttpURLConnection) new URL(url).openConnection();\n    }\n', 'customConnectionFactory': 'public void customConnectionFactory() throws Exception {\n  handler = new RequestHandler() {\n\n    @Override\n    public void handle(Request request, HttpServletResponse response) {\n      response.setStatus(HTTP_OK);\n    }\n  };\n\n  ConnectionFactory factory = new ConnectionFactory() {\n\n    public HttpURLConnection create(URL otherUrl) throws IOException {\n      return (HttpURLConnection) new URL(url).openConnection();\n    }\n\n    public HttpURLConnection create(URL url, Proxy proxy) throws IOException {\n      throw new IOException();\n    }\n  };\n\n  HttpRequest.setConnectionFactory(factory);\n  int code = get("http://not/a/real/url").code();\n  assertEquals(200, code);\n\n  \n\n  // Reset the ConnectionFactory to its default state\n  HttpRequest.setConnectionFactory(null);\n  \n\n}\n'}}polluter
:import:
[]polluter
:pom:
polluter
:toreplace:
{'field_names': [], 'method_names': ['handle', 'create', 'customConnectionFactory']}