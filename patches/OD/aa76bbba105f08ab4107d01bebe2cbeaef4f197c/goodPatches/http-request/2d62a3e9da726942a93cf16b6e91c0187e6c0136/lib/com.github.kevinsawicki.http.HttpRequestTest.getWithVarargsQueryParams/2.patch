victim
:code:
{'fields': {}, 'methods': {'handle': '@Override    public void handle(Request request, HttpServletResponse response) {\n      method.set(request.getMethod());\n      outputParams.put("name", request.getParameter("name"));\n      outputParams.put("number", request.getParameter("number"));\n      response.setStatus(HTTP_OK);\n    }\n', 'getWithVarargsQueryParams': 'public void getWithVarargsQueryParams() throws Exception {\n  final Map<String, String> outputParams = new HashMap<String, String>();\n  final AtomicReference<String> method = new AtomicReference<String>();\n  handler = new RequestHandler() {\n\n    @Override\n    public void handle(Request request, HttpServletResponse response) {\n      method.set(request.getMethod());\n      outputParams.put("name", request.getParameter("name"));\n      outputParams.put("number", request.getParameter("number"));\n      response.setStatus(HTTP_OK);\n    }\n  };\n  // Explicitly set the parameters in the URL\n  url += "?name=user&number=100";\n  HttpRequest request = get(url, false);\n  assertTrue(request.ok());\n  assertEquals("GET", method.get());\n  assertEquals("user", outputParams.get("name"));\n  assertEquals("100", outputParams.get("number"));\n}\n'}}victim
:import:
[]victim
:pom:
victim
:toreplace:
{'field_names': [], 'method_names': ['handle', 'getWithVarargsQueryParams']}polluter
:code:
{'fields': {}, 'methods': {'handle': '@Override    public void handle(Request request, HttpServletResponse response) {\n      method.set(request.getMethod());\n      outputParams.put("name", request.getParameter("name"));\n      outputParams.put("number", request.getParameter("number"));\n      response.setStatus(HTTP_OK);\n    }\n', 'getWithVarargsQueryParams': 'public void getWithVarargsQueryParams() throws Exception {\n  final Map<String, String> outputParams = new HashMap<String, String>();\n  final AtomicReference<String> method = new AtomicReference<String>();\n  handler = new RequestHandler() {\n\n    @Override\n    public void handle(Request request, HttpServletResponse response) {\n      method.set(request.getMethod());\n      outputParams.put("name", request.getParameter("name"));\n      outputParams.put("number", request.getParameter("number"));\n      response.setStatus(HTTP_OK);\n    }\n  };\n  // Explicitly set the parameters in the URL\n  url += "?name=user&number=100";\n  HttpRequest request = get(url, false);\n  assertTrue(request.ok());\n  assertEquals("GET", method.get());\n  assertEquals("user", outputParams.get("name"));\n  assertEquals("100", outputParams.get("number"));\n}\n'}}polluter
:import:
[]polluter
:pom:
polluter
:toreplace:
{'field_names': [], 'method_names': ['handle', 'getWithVarargsQueryParams']}