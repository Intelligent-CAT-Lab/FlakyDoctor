test_before_fix:
	public void testSerializerTree() {
		@SuppressWarnings("unchecked")
		TypeInformation<CollectionDataSets.PojoWithCollectionGeneric> ti =
				(TypeInformation<CollectionDataSets.PojoWithCollectionGeneric>)
						TypeExtractor.createTypeInfo(CollectionDataSets.PojoWithCollectionGeneric.class);

		final String serTree = Utils.getSerializerTree(ti)
			// normalize String/BigInteger representations as they vary across java versions
			// do 2 passes for BigInteger since they occur at different indentations
			.replaceAll("(java\\.lang\\.String\\R)( {12}\\S*\\R)+", "$1")
			.replaceAll("( {4}[a-zA-Z]+:java\\.math\\.BigInteger\\R)( {8}\\S*\\R)+", "$1")
			.replaceAll("( {8}[a-zA-Z]+:java\\.math\\.BigInteger\\R)( {12}\\S*\\R)+", "$1");

		Assert.assertThat(serTree, equalTo("GenericTypeInfo (PojoWithCollectionGeneric)\n" +
				"    pojos:java.util.List\n" +
				"    key:int\n" +
				"    sqlDate:java.sql.Date\n" +
				"    bigInt:java.math.BigInteger\n" +
				"    bigDecimalKeepItNull:java.math.BigDecimal\n" +
				"        intVal:java.math.BigInteger\n" +
				"        scale:int\n" +
				"    scalaBigInt:scala.math.BigInt\n" +
				"        bigInteger:java.math.BigInteger\n" +
				"    mixed:java.util.List\n" +
				"    makeMeGeneric:org.apache.flink.test.operators.util.CollectionDataSets$PojoWithDateAndEnum\n" +
				"        group:java.lang.String\n" +
				"        date:java.util.Date\n" +
				"        cat:org.apache.flink.test.operators.util.CollectionDataSets$Category (is enum)\n"));
	}

test_after_fix:

code:
public void testSerializerTree() { 
     @SuppressWarnings("unchecked") 
     TypeInformation<CollectionDataSets.PojoWithCollectionGeneric> ti = 
             (TypeInformation<CollectionDataSets.PojoWithCollectionGeneric>) 
                     TypeExtractor.createTypeInfo(CollectionDataSets.PojoWithCollectionGeneric.class); 
  
     final String serTree = Utils.getSerializerTree(ti) 
             .replaceAll("(java\\.lang\\.String\\R)( {12}\\S*\\R)+", "$1") 
             .replaceAll("( {4}[a-zA-Z]+:java\\.math\\.BigInteger\\R)( {8}\\S*\\R)+", "$1") 
             .replaceAll("( {8}[a-zA-Z]+:java\\.math\\.BigInteger\\R)( {12}\\S*\\R)+", "$1"); 
  
     List<String> expectedLines = new ArrayList<>(); 
     Collections.addAll(expectedLines, 
             "GenericTypeInfo (PojoWithCollectionGeneric)", 
             "    pojos:java.util.List", 
             "    key:int", 
             "    sqlDate:java.sql.Date", 
             "    bigInt:java.math.BigInteger", 
             "    bigDecimalKeepItNull:java.math.BigDecimal", 
             "        intVal:java.math.BigInteger", 
             "        scale:int", 
             "    scalaBigInt:scala.math.BigInt", 
             "        bigInteger:java.math.BigInteger", 
             "    mixed:java.util.List", 
             "    makeMeGeneric:org.apache.flink.test.operators.util.CollectionDataSets$PojoWithDateAndEnum", 
             "        group:java.lang.String", 
             "        date:java.util.Date", 
             "        cat:org.apache.flink.test.operators.util.CollectionDataSets$Category (is enum)" 
     ); 
  
     String[] actualLines = serTree.split("\n"); 
     List<String> actualLinesList = new ArrayList<>(Arrays.asList(actualLines)); 
  
     Collections.sort(expectedLines); 
     Collections.sort(actualLinesList); 
  
     Assert.assertArrayEquals(expectedLines.toArray(), actualLinesList.toArray()); 
 } 
 
import:
['import java.util.ArrayList;\n ', 'import java.util.Collections;\n ', 'import java.util.List;\n ', 'import java.util.Arrays;\n ', 'import java.util.Collections;\n ', 'import java.util.List;\n ', 'import java.util.ArrayList;\n ']
pom:
