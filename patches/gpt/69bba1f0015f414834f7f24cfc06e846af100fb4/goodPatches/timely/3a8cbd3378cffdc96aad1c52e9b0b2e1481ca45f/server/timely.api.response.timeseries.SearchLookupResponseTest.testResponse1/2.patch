test_before_fix:
    public void testResponse1() throws Exception {
        SearchLookupResponse response = new SearchLookupResponse();
        response.setType("LOOKUP");
        response.setMetric("sys.cpu.user");
        response.putTag("host", "localhost");
        response.putTag("rack", "r1");
        response.setTime(1500);
        List<Result> results = new ArrayList<>();
        Result r1 = new Result();
        r1.setMetric("sys.cpu.idle");
        r1.setTsuid("000011000008203D00");
        r1.putTag("host", "localhost");
        r1.putTag("rack", "r1");
        Result r2 = new Result();
        r2.setMetric("sys.cpu.user");
        r2.setTsuid("000011000008203D01");
        r2.putTag("host", "localhost");
        r2.putTag("rack", "r1");
        results.add(r1);
        results.add(r2);
        response.setResults(results);
        response.setTotalResults(results.size());
        String r = JsonUtil.getObjectMapper().writeValueAsString(response);
        String expected = "{\"type\":\"LOOKUP\",\"metric\":\"sys.cpu.user\",\"tags\":{\"rack\":\"r1\",\"host\":\"localhost\"},\"limit\":0,\"time\":1500,\"totalResults\":2,\"results\":[{\"tags\":{\"rack\":\"r1\",\"host\":\"localhost\"},\"metric\":\"sys.cpu.idle\",\"tsuid\":\"000011000008203D00\"},{\"tags\":{\"rack\":\"r1\",\"host\":\"localhost\"},\"metric\":\"sys.cpu.user\",\"tsuid\":\"000011000008203D01\"}]}";
        Assert.assertEquals(expected, r);
        SearchLookupResponse slr = JsonUtil.getObjectMapper().readValue(r, SearchLookupResponse.class);
        Assert.assertEquals(response, slr);
    }

test_after_fix:

code:
public void testResponse1() throws Exception {  
     SearchLookupResponse response = new SearchLookupResponse();  
     response.setType("LOOKUP");  
     response.setMetric("sys.cpu.user");  
     Map<String, String> tags = new LinkedHashMap<>();  
     tags.put("host", "localhost");  
     tags.put("rack", "r1");  
     response.setTags(tags);  
     response.setTime(1500);  
     List<Result> results = new ArrayList<>();  
     Result r1 = new Result();  
     r1.setMetric("sys.cpu.idle");  
     r1.setTsuid("000011000008203D00");  
     Map<String, String> r1Tags = new LinkedHashMap<>();  
     r1Tags.put("host", "localhost");  
     r1Tags.put("rack", "r1");  
     r1.setTags(r1Tags);  
     Result r2 = new Result();  
     r2.setMetric("sys.cpu.user");  
     r2.setTsuid("000011000008203D01");  
     Map<String, String> r2Tags = new LinkedHashMap<>();  
     r2Tags.put("host", "localhost");  
     r2Tags.put("rack", "r1");  
     r2.setTags(r2Tags);  
     results.add(r1);  
     results.add(r2);  
     response.setResults(results);  
     response.setTotalResults(results.size());  
     ObjectMapper mapper = new ObjectMapper();  
     mapper.configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);  
     String r = mapper.writeValueAsString(response);  
     SearchLookupResponse slr = mapper.readValue(r, SearchLookupResponse.class);  
     Assert.assertEquals(response, slr);  
 } 
 
import:
[]
pom:

<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.12.3</version>
</dependency>
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.13.2</version>
    <scope>test</scope>
</dependency>
