Test File Path: projects/6f37921610ee0d8438b9ec8adc8b02f88a17f992/fosstars-rating-core/src/test/java/com/sap/oss/phosphor/fosstars/data/artifact/VulnerabilitiesFromOwaspDependencyCheckTest.java

    Original Test Method:
   public void testVulnerabilitiesAvailable() throws IOException {
    VulnerabilitiesFromOwaspDependencyCheck provider =
        new VulnerabilitiesFromOwaspDependencyCheck();
    provider = spy(provider);

    String content =
        getClass().getResource("VulnerabilitiesFromOwaspDependencyCheck.json").getFile();
    Optional<OwaspDependencyCheckEntry> entry =
        Optional.of(Json.mapper().readValue(new File(content), OwaspDependencyCheckEntry.class));

    doReturn(entry).when(provider).scan(MAVEN_ARTIFACT);

    ValueHashSet values = new ValueHashSet();
    assertEquals(0, values.size());

    provider.update(MAVEN_ARTIFACT, values);

    assertEquals(1, values.size());
    assertTrue(values.has(VULNERABILITIES_IN_ARTIFACT));
    assertTrue(values.of(VULNERABILITIES_IN_ARTIFACT).isPresent());
    assertFalse(values.of(VULNERABILITIES_IN_ARTIFACT).get().isUnknown());

    Vulnerabilities vulnerabilities = values.of(VULNERABILITIES_IN_ARTIFACT).get().get();
    assertEquals(3, vulnerabilities.size());

    Vulnerability vulnerability = vulnerabilities.entries().iterator().next();
    assertEquals("CVE-2018-11307", vulnerability.id());
  }

    
test_code:
public void testVulnerabilitiesAvailable() throws IOException {
    VulnerabilitiesFromOwaspDependencyCheck provider =
        new VulnerabilitiesFromOwaspDependencyCheck();
    provider = spy(provider);

    String content =
        getClass().getResource("VulnerabilitiesFromOwaspDependencyCheck.json").getFile();
    Optional<OwaspDependencyCheckEntry> entry =
        Optional.of(Json.mapper().readValue(new File(content), OwaspDependencyCheckEntry.class));

    doReturn(entry).when(provider).scan(MAVEN_ARTIFACT);

    ValueHashSet values = new ValueHashSet();
    assertEquals(0, values.size());

    provider.update(MAVEN_ARTIFACT, values);

    assertEquals(1, values.size());
    assertTrue(values.has(VULNERABILITIES_IN_ARTIFACT));
    assertTrue(values.of(VULNERABILITIES_IN_ARTIFACT).isPresent());
    assertFalse(values.of(VULNERABILITIES_IN_ARTIFACT).get().isUnknown());

    Vulnerabilities vulnerabilities = values.of(VULNERABILITIES_IN_ARTIFACT).get().get();
    assertEquals(3, vulnerabilities.size());

    List<Vulnerability> vulnerabilityList = new ArrayList<>(vulnerabilities.entries());
    Collections.sort(vulnerabilityList, Comparator.comparing(Vulnerability::id));

    Vulnerability vulnerability = vulnerabilityList.stream()
        .filter(v -> v.id().equals("CVE-2018-11307"))
        .findFirst()
        .orElseThrow(() -> new AssertionError("Expected vulnerability not found"));

    assertEquals("CVE-2018-11307", vulnerability.id());
}

import:
[]
pom:

<!-- No changes needed -->
