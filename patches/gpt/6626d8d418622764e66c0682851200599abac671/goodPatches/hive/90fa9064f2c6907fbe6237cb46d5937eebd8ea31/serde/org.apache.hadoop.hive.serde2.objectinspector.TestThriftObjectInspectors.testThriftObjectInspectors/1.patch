test_before_fix:
  public void testThriftObjectInspectors() throws Throwable {

    try {
      ObjectInspector oi1 = ObjectInspectorFactory
          .getReflectionObjectInspector(Complex.class,
          ObjectInspectorFactory.ObjectInspectorOptions.THRIFT);
      ObjectInspector oi2 = ObjectInspectorFactory
          .getReflectionObjectInspector(Complex.class,
          ObjectInspectorFactory.ObjectInspectorOptions.THRIFT);
      assertEquals(oi1, oi2);

      // metadata
      assertEquals(Category.STRUCT, oi1.getCategory());
      StructObjectInspector soi = (StructObjectInspector) oi1;
      List<? extends StructField> fields = soi.getAllStructFieldRefs();
      assertEquals(10, fields.size());
      assertEquals(fields.get(0), soi.getStructFieldRef("aint"));

      // null
      for (int i = 0; i < fields.size(); i++) {
        assertNull(soi.getStructFieldData(null, fields.get(i)));
      }

      ObjectInspector oi = ObjectInspectorFactory
          .getReflectionObjectInspector(PropValueUnion.class,
          ObjectInspectorFactory.ObjectInspectorOptions.THRIFT);
      assertNotNull(oi.toString());

      // real object
      Complex c = new Complex();
      c.setAint(1);
      c.setAString("test");
      List<Integer> c2 = Arrays.asList(new Integer[] {1, 2, 3});
      c.setLint(c2);
      List<String> c3 = Arrays.asList(new String[] {"one", "two"});
      c.setLString(c3);
      List<IntString> c4 = new ArrayList<IntString>();
      c.setLintString(c4);
      c.setMStringString(null);
      c.setAttributes(null);
      c.setUnionField1(null);
      c.setUnionField2(null);
      c.setUnionField3(null);

      assertEquals(1, soi.getStructFieldData(c, fields.get(0)));
      assertEquals("test", soi.getStructFieldData(c, fields.get(1)));
      assertEquals(c2, soi.getStructFieldData(c, fields.get(2)));
      assertEquals(c3, soi.getStructFieldData(c, fields.get(3)));
      assertEquals(c4, soi.getStructFieldData(c, fields.get(4)));
      assertNull(soi.getStructFieldData(c, fields.get(5)));
      assertNull(soi.getStructFieldData(c, fields.get(6)));
      assertNull(soi.getStructFieldData(c, fields.get(7)));
      assertNull(soi.getStructFieldData(c, fields.get(8)));
      assertNull(soi.getStructFieldData(c, fields.get(9)));

      ArrayList<Object> cfields = new ArrayList<Object>();
      for (int i = 0; i < 10; i++) {
        cfields.add(soi.getStructFieldData(c, fields.get(i)));
      }
      assertEquals(cfields, soi.getStructFieldsDataAsList(c));

      // sub fields
      assertEquals(PrimitiveObjectInspectorFactory.javaIntObjectInspector,
          fields.get(0).getFieldObjectInspector());
      assertEquals(PrimitiveObjectInspectorFactory.javaStringObjectInspector,
          fields.get(1).getFieldObjectInspector());
      assertEquals(
          ObjectInspectorFactory
          .getStandardListObjectInspector(PrimitiveObjectInspectorFactory.javaIntObjectInspector),
          fields.get(2).getFieldObjectInspector());
      assertEquals(
          ObjectInspectorFactory
              .getStandardListObjectInspector(PrimitiveObjectInspectorFactory
                  .javaStringObjectInspector),
          fields.get(3).getFieldObjectInspector());
      assertEquals(ObjectInspectorFactory
          .getStandardListObjectInspector(ObjectInspectorFactory
          .getReflectionObjectInspector(IntString.class,
          ObjectInspectorFactory.ObjectInspectorOptions.THRIFT)),
          fields.get(4).getFieldObjectInspector());
      assertEquals(ObjectInspectorFactory.getStandardMapObjectInspector(
          PrimitiveObjectInspectorFactory.javaStringObjectInspector,
          PrimitiveObjectInspectorFactory.javaStringObjectInspector), fields
          .get(5).getFieldObjectInspector());
    } catch (Throwable e) {
      e.printStackTrace();
      throw e;
    }
  }

test_after_fix:

code:
 
  
 public void testThriftObjectInspectors() throws Throwable { 
     ObjectInspector oi1 = ObjectInspectorFactory 
         .getReflectionObjectInspector(Complex.class, 
         ObjectInspectorFactory.ObjectInspectorOptions.THRIFT); 
     ObjectInspector oi2 = ObjectInspectorFactory 
         .getReflectionObjectInspector(Complex.class, 
         ObjectInspectorFactory.ObjectInspectorOptions.THRIFT); 
     assertEquals(oi1, oi2); 
  
     // metadata 
     assertEquals(Category.STRUCT, oi1.getCategory()); 
     StructObjectInspector soi = (StructObjectInspector) oi1; 
     List<? extends StructField> fields = soi.getAllStructFieldRefs(); 
     assertEquals(10, fields.size()); 
  
     Map<String, StructField> fieldMap = new LinkedHashMap<>(); 
     for (StructField field : fields) { 
         fieldMap.put(field.getFieldName(), field); 
     } 
  
     assertEquals(fieldMap.get("aint"), soi.getStructFieldRef("aint")); 
  
     // null 
     for (int i = 0; i < fields.size(); i++) { 
         assertNull(soi.getStructFieldData(null, fields.get(i))); 
     } 
  
     ObjectInspector oi = ObjectInspectorFactory 
         .getReflectionObjectInspector(PropValueUnion.class, 
         ObjectInspectorFactory.ObjectInspectorOptions.THRIFT); 
     assertNotNull(oi.toString()); 
  
     // real object 
     Complex c = new Complex(); 
     c.setAint(1); 
     c.setAString("test"); 
     List<Integer> c2 = Arrays.asList(new Integer[] {1, 2, 3}); 
     c.setLint(c2); 
     List<String> c3 = Arrays.asList(new String[] {"one", "two"}); 
     c.setLString(c3); 
     List<IntString> c4 = new ArrayList<IntString>(); 
     c.setLintString(c4); 
     c.setMStringString(null); 
     c.setAttributes(null); 
     c.setUnionField1(null); 
     c.setUnionField2(null); 
     c.setUnionField3(null); 
  
     assertEquals(1, soi.getStructFieldData(c, fieldMap.get("aint"))); 
     assertEquals("test", soi.getStructFieldData(c, fieldMap.get("aString"))); 
     assertEquals(c2, soi.getStructFieldData(c, fieldMap.get("lint"))); 
     assertEquals(c3, soi.getStructFieldData(c, fieldMap.get("lString"))); 
     assertEquals(c4, soi.getStructFieldData(c, fieldMap.get("lintString"))); 
     assertNull(soi.getStructFieldData(c, fieldMap.get("mStringString"))); 
     assertNull(soi.getStructFieldData(c, fieldMap.get("attributes"))); 
     assertNull(soi.getStructFieldData(c, fieldMap.get("unionField1"))); 
     assertNull(soi.getStructFieldData(c, fieldMap.get("unionField2"))); 
     assertNull(soi.getStructFieldData(c, fieldMap.get("unionField3"))); 
  
     ArrayList<Object> cfields = new ArrayList<Object>(); 
     for (int i = 0; i < 10; i++) { 
         cfields.add(soi.getStructFieldData(c, fields.get(i))); 
     } 
     assertEquals(cfields, soi.getStructFieldsDataAsList(c)); 
  
     // sub fields 
     assertEquals(PrimitiveObjectInspectorFactory.javaIntObjectInspector, 
         fieldMap.get("aint").getFieldObjectInspector()); 
     assertEquals(PrimitiveObjectInspectorFactory.javaStringObjectInspector, 
         fieldMap.get("aString").getFieldObjectInspector()); 
     assertEquals( 
         ObjectInspectorFactory 
         .getStandardListObjectInspector(PrimitiveObjectInspectorFactory.javaIntObjectInspector), 
         fieldMap.get("lint").getFieldObjectInspector()); 
     assertEquals( 
         ObjectInspectorFactory 
             .getStandardListObjectInspector(PrimitiveObjectInspectorFactory 
                 .javaStringObjectInspector), 
         fieldMap.get("lString").getFieldObjectInspector()); 
     assertEquals(ObjectInspectorFactory 
         .getStandardListObjectInspector(ObjectInspectorFactory 
         .getReflectionObjectInspector(IntString.class, 
         ObjectInspectorFactory.ObjectInspectorOptions.THRIFT)), 
         fieldMap.get("lintString").getFieldObjectInspector()); 
     assertEquals(ObjectInspectorFactory.getStandardMapObjectInspector( 
         PrimitiveObjectInspectorFactory.javaStringObjectInspector, 
         PrimitiveObjectInspectorFactory.javaStringObjectInspector), fieldMap 
         .get("mStringString").getFieldObjectInspector()); 
 } 
  
  
 
import:
['import java.util.LinkedHashMap;\n ', 'import java.util.Map;\n ', 'import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\n ', 'import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;\n ', 'import org.apache.hadoop.hive.serde2.objectinspector.StructField;\n ', 'import org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector;\n ']
pom:

