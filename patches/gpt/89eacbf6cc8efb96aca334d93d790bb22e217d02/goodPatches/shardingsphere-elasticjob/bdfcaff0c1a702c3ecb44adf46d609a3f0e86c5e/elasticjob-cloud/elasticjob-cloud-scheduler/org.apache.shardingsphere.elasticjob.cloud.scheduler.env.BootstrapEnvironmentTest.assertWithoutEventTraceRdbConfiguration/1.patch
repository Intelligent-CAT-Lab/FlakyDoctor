victim
:code:
{'fields': {}, 'methods': {'assertGetEventTraceRdbConfigurationMap': 'public void assertGetEventTraceRdbConfigurationMap() {\n    Properties properties = new Properties();\n    properties.setProperty(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_DRIVER.getKey(), "org.h2.Driver");\n    properties.setProperty(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_URL.getKey(), "jdbc:h2:mem:job_event_trace");\n    properties.setProperty(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_USERNAME.getKey(), "sa");\n    properties.setProperty(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_PASSWORD.getKey(), "password");\n    ReflectionUtils.setFieldValue(bootstrapEnvironment, "properties", properties);\n    Map<String, String> jobEventRdbConfigurationMap = bootstrapEnvironment.getJobEventRdbConfigurationMap();\n    assertThat(jobEventRdbConfigurationMap.get(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_DRIVER.getKey()), is("org.h2.Driver"));\n    assertThat(jobEventRdbConfigurationMap.get(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_URL.getKey()), is("jdbc:h2:mem:job_event_trace"));\n    assertThat(jobEventRdbConfigurationMap.get(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_USERNAME.getKey()), is("sa"));\n    assertThat(jobEventRdbConfigurationMap.get(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_PASSWORD.getKey()), is("password"));\n\n    \n\n    // Reset the properties field of the bootstrapEnvironment object to its initial state\n    ReflectionUtils.setFieldValue(bootstrapEnvironment, "properties", new Properties());\n    \n\n}\n', 'assertWithoutEventTraceRdbConfiguration': 'public void assertWithoutEventTraceRdbConfiguration() {\n    assertFalse(bootstrapEnvironment.getTracingConfiguration().isPresent());\n}\n'}}victim
:import:
[]victim
:pom:
victim
:toreplace:
{'field_names': [], 'method_names': ['assertGetEventTraceRdbConfigurationMap', 'assertWithoutEventTraceRdbConfiguration']}polluter
:code:
{'fields': {}, 'methods': {'assertGetEventTraceRdbConfigurationMap': 'public void assertGetEventTraceRdbConfigurationMap() {\n    Properties properties = new Properties();\n    properties.setProperty(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_DRIVER.getKey(), "org.h2.Driver");\n    properties.setProperty(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_URL.getKey(), "jdbc:h2:mem:job_event_trace");\n    properties.setProperty(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_USERNAME.getKey(), "sa");\n    properties.setProperty(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_PASSWORD.getKey(), "password");\n    ReflectionUtils.setFieldValue(bootstrapEnvironment, "properties", properties);\n    Map<String, String> jobEventRdbConfigurationMap = bootstrapEnvironment.getJobEventRdbConfigurationMap();\n    assertThat(jobEventRdbConfigurationMap.get(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_DRIVER.getKey()), is("org.h2.Driver"));\n    assertThat(jobEventRdbConfigurationMap.get(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_URL.getKey()), is("jdbc:h2:mem:job_event_trace"));\n    assertThat(jobEventRdbConfigurationMap.get(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_USERNAME.getKey()), is("sa"));\n    assertThat(jobEventRdbConfigurationMap.get(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_PASSWORD.getKey()), is("password"));\n\n    \n\n    // Reset the properties field of the bootstrapEnvironment object to its initial state\n    ReflectionUtils.setFieldValue(bootstrapEnvironment, "properties", new Properties());\n    \n\n}\n', 'assertWithoutEventTraceRdbConfiguration': 'public void assertWithoutEventTraceRdbConfiguration() {\n    assertFalse(bootstrapEnvironment.getTracingConfiguration().isPresent());\n}\n'}}polluter
:import:
[]polluter
:pom:
polluter
:toreplace:
{'field_names': [], 'method_names': ['assertGetEventTraceRdbConfigurationMap', 'assertWithoutEventTraceRdbConfiguration']}