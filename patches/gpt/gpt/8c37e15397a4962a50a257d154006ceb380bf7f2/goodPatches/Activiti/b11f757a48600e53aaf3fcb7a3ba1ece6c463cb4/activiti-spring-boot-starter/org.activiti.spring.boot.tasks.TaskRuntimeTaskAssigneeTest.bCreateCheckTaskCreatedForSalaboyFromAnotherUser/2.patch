test_before_fix:
    public void bCreateCheckTaskCreatedForSalaboyFromAnotherUser() {

        // the target user should be able to see the task as well
        Page<Task> tasks = taskRuntime.tasks(Pageable.of(0,
                50));

        assertThat(tasks.getContent()).hasSize(1);
        Task task = tasks.getContent().get(0);

        String authenticatedUserId = securityManager.getAuthenticatedUserId();
        assertThat(task.getAssignee()).isEqualTo(authenticatedUserId);
        assertThat(task.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED);

        Task deletedTask = taskRuntime.delete(TaskPayloadBuilder
                .delete()
                .withTaskId(task.getId())
                .withReason("test clean up")
                .build());

        assertThat(deletedTask).isNotNull();
        assertThat(deletedTask.getStatus()).isEqualTo(Task.TaskStatus.DELETED);

        tasks = taskRuntime.tasks(Pageable.of(0,
                50));
        assertThat(tasks.getContent()).hasSize(0);


    }

test_after_fix:

code:
 
  
 public void bCreateCheckTaskCreatedForSalaboyFromAnotherUser() { 
  
     // the target user should be able to see the task as well 
     Page<Task> tasks = taskRuntime.tasks(Pageable.of(0, 50)); 
  
     if(tasks.getContent().isEmpty()) { 
         // Create a task if there are no tasks 
         Task createdTask = taskRuntime.create(TaskPayloadBuilder.create() 
                 .withName("test task") 
                 .withDescription("test task description") 
                 .withAssignee(securityManager.getAuthenticatedUserId()) 
                 .build()); 
  
         tasks = taskRuntime.tasks(Pageable.of(0, 50)); 
     } 
  
     assertThat(tasks.getContent()).hasSize(1); 
     Task task = tasks.getContent().get(0); 
  
     String authenticatedUserId = securityManager.getAuthenticatedUserId(); 
     assertThat(task.getAssignee()).isEqualTo(authenticatedUserId); 
     assertThat(task.getStatus()).isEqualTo(Task.TaskStatus.ASSIGNED); 
  
     Task deletedTask = taskRuntime.delete(TaskPayloadBuilder 
             .delete() 
             .withTaskId(task.getId()) 
             .withReason("test clean up") 
             .build()); 
  
     assertThat(deletedTask).isNotNull(); 
     assertThat(deletedTask.getStatus()).isEqualTo(Task.TaskStatus.DELETED); 
  
     tasks = taskRuntime.tasks(Pageable.of(0, 50)); 
     assertThat(tasks.getContent()).hasSize(0); 
 } 
  
  
 
import:
[]
pom:

