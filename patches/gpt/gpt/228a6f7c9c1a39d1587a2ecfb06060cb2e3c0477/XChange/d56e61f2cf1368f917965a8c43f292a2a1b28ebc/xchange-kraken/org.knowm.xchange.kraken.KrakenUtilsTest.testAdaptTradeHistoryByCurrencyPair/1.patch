Test File Path: projects/d56e61f2cf1368f917965a8c43f292a2a1b28ebc/XChange/xchange-kraken/src/test/java/org/knowm/xchange/kraken/KrakenUtilsTest.java

    Original Test Method:
   public void testAdaptTradeHistoryByCurrencyPair()
      throws JsonParseException, JsonMappingException, IOException {
    Map<String, KrakenTrade> krakenTradeMap =
        loadUserTrades("/org/knowm/xchange/kraken/dto/trading/example-tradehistory-data.json");

    Map<String, KrakenTrade> filteredKrakenTradeMap =
        KrakenUtils.filterTradeHistoryByCurrencyPair(krakenTradeMap, CurrencyPair.BTC_USD);

    assertThat(filteredKrakenTradeMap.size()).isEqualTo(2);

    UserTrades userTrades = KrakenAdapters.adaptTradesHistory(filteredKrakenTradeMap);

    UserTrade trade0 = userTrades.getUserTrades().get(0);
    assertThat(trade0).isInstanceOf(KrakenUserTrade.class);
    assertThat(trade0.getId()).isEqualTo("TY5BYV-WJUQF-XPYEYD-2");
    assertThat(trade0.getPrice()).isEqualTo("32.07562");
    assertThat(trade0.getOriginalAmount()).isEqualTo("0.50000000");
    assertThat(trade0.getCurrencyPair().base).isEqualTo(Currency.BTC);
    assertThat(trade0.getCurrencyPair().counter).isEqualTo(Currency.USD);
    assertThat(trade0.getType()).isEqualTo(OrderType.ASK);
    assertThat(trade0.getFeeAmount()).isEqualTo("0.03208");
    assertThat(trade0.getFeeCurrency()).isEqualTo(Currency.USD);
    assertThat(((KrakenUserTrade) trade0).getCost()).isEqualTo("16.03781");

    UserTrade trade1 = userTrades.getUserTrades().get(1);
    assertThat(trade1).isInstanceOf(KrakenUserTrade.class);
    assertThat(trade1.getId()).isEqualTo("TY5BYV-WJUQF-XPYEYD-3");
    assertThat(trade1.getPrice()).isEqualTo("32.07562");
    assertThat(trade1.getOriginalAmount()).isEqualTo("0.50000000");
    assertThat(trade1.getCurrencyPair().base).isEqualTo(Currency.BTC);
    assertThat(trade1.getCurrencyPair().counter).isEqualTo(Currency.USD);
    assertThat(trade1.getType()).isEqualTo(OrderType.ASK);
    assertThat(trade1.getFeeAmount()).isEqualTo("0.03208");
    assertThat(trade1.getFeeCurrency()).isEqualTo(Currency.USD);
    assertThat(((KrakenUserTrade) trade1).getCost()).isEqualTo("16.03781");
  }

    
test_code:
public void testAdaptTradeHistoryByCurrencyPair() throws JsonParseException, JsonMappingException, IOException {
    Map<String, KrakenTrade> krakenTradeMap = loadUserTrades("/org/knowm/xchange/kraken/dto/trading/example-tradehistory-data.json");

    Map<String, KrakenTrade> filteredKrakenTradeMap = KrakenUtils.filterTradeHistoryByCurrencyPair(krakenTradeMap, CurrencyPair.BTC_USD);

    assertThat(filteredKrakenTradeMap.size()).isEqualTo(2);

    UserTrades userTrades = KrakenAdapters.adaptTradesHistory(filteredKrakenTradeMap);

    List<UserTrade> sortedUserTrades = new ArrayList<>(userTrades.getUserTrades());
    sortedUserTrades.sort(Comparator.comparing(UserTrade::getId));

    UserTrade trade0 = sortedUserTrades.get(0);
    assertThat(trade0).isInstanceOf(KrakenUserTrade.class);
    assertThat(trade0.getId()).isEqualTo("TY5BYV-WJUQF-XPYEYD-2");
    assertThat(trade0.getPrice()).isEqualTo("32.07562");
    assertThat(trade0.getOriginalAmount()).isEqualTo("0.50000000");
    assertThat(trade0.getCurrencyPair().base).isEqualTo(Currency.BTC);
    assertThat(trade0.getCurrencyPair().counter).isEqualTo(Currency.USD);
    assertThat(trade0.getType()).isEqualTo(OrderType.ASK);
    assertThat(trade0.getFeeAmount()).isEqualTo("0.03208");
    assertThat(trade0.getFeeCurrency()).isEqualTo(Currency.USD);
    assertThat(((KrakenUserTrade) trade0).getCost()).isEqualTo("16.03781");

    UserTrade trade1 = sortedUserTrades.get(1);
    assertThat(trade1).isInstanceOf(KrakenUserTrade.class);
    assertThat(trade1.getId()).isEqualTo("TY5BYV-WJUQF-XPYEYD-3");
    assertThat(trade1.getPrice()).isEqualTo("32.07562");
    assertThat(trade1.getOriginalAmount()).isEqualTo("0.50000000");
    assertThat(trade1.getCurrencyPair().base).isEqualTo(Currency.BTC);
    assertThat(trade1.getCurrencyPair().counter).isEqualTo(Currency.USD);
    assertThat(trade1.getType()).isEqualTo(OrderType.ASK);
    assertThat(trade1.getFeeAmount()).isEqualTo("0.03208");
    assertThat(trade1.getFeeCurrency()).isEqualTo(Currency.USD);
    assertThat(((KrakenUserTrade) trade1).getCost()).isEqualTo("16.03781");
}

import:
['import java.util.ArrayList;', 'import java.util.Comparator;', 'import java.util.List;']
pom:

 <!-- No changes needed -->
 