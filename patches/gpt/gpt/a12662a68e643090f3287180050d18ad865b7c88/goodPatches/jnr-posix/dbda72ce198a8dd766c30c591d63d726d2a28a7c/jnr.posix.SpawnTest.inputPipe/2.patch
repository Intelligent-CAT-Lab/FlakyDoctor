victim
:code:
{'fields': {}, 'methods': {'inputPipe': 'public void inputPipe() {\n    if (Platform.getNativePlatform().isUnix()) {\n        int[] outputPipe = { -1, -1 };\n        int[] inputPipe = { -1, -1 };\n        long pid = -1;\n        try {\n            assertFalse(libc.pipe(outputPipe) < 0);\n            assertFalse(libc.pipe(inputPipe) < 0);\n            assertNotSame(-1, outputPipe[0]);\n            assertNotSame(-1, outputPipe[1]);\n            assertNotSame(-1, inputPipe[0]);\n            assertNotSame(-1, inputPipe[1]);\n\n            List<SpawnFileAction> actions = Arrays.asList(dup(inputPipe[0], 0), dup(outputPipe[1], 1));\n            pid = posix.posix_spawnp("cat", actions, Arrays.asList("cat", "-"), emptyEnv);\n            assertTrue(pid != -1);\n            posix.libc().close(inputPipe[0]);\n            assertEquals(3, posix.libc().write(inputPipe[1], ByteBuffer.wrap("foo".getBytes(Charset.forName("US-ASCII"))), 3));\n            posix.libc().close(inputPipe[1]); // send EOF to process\n\n            // close the write side of the output pipe, so read() will return immediately once the process has exited\n            posix.libc().close(outputPipe[1]);\n\n            ByteBuffer output = ByteBuffer.allocate(100);\n            long nbytes = posix.libc().read(outputPipe[0], output, output.remaining());\n            assertEquals(3L, nbytes);\n            output.position((int) nbytes).flip();\n            byte[] bytes = new byte[output.remaining()];\n            output.get(bytes);\n            assertEquals("foo", new String(bytes).trim());\n        } finally {\n            closePipe(outputPipe);\n            closePipe(inputPipe);\n            if (pid != -1) {\n                posix.libc().kill(pid, 9); // ensure the child process is killed\n            }\n        }\n    }\n}\n'}}victim
:import:
[]victim
:pom:
victim
:toreplace:
{'field_names': [], 'method_names': ['inputPipe']}polluter
:code:
{'fields': {}, 'methods': {'inputPipe': 'public void inputPipe() {\n    if (Platform.getNativePlatform().isUnix()) {\n        int[] outputPipe = { -1, -1 };\n        int[] inputPipe = { -1, -1 };\n        long pid = -1;\n        try {\n            assertFalse(libc.pipe(outputPipe) < 0);\n            assertFalse(libc.pipe(inputPipe) < 0);\n            assertNotSame(-1, outputPipe[0]);\n            assertNotSame(-1, outputPipe[1]);\n            assertNotSame(-1, inputPipe[0]);\n            assertNotSame(-1, inputPipe[1]);\n\n            List<SpawnFileAction> actions = Arrays.asList(dup(inputPipe[0], 0), dup(outputPipe[1], 1));\n            pid = posix.posix_spawnp("cat", actions, Arrays.asList("cat", "-"), emptyEnv);\n            assertTrue(pid != -1);\n            posix.libc().close(inputPipe[0]);\n            assertEquals(3, posix.libc().write(inputPipe[1], ByteBuffer.wrap("foo".getBytes(Charset.forName("US-ASCII"))), 3));\n            posix.libc().close(inputPipe[1]); // send EOF to process\n\n            // close the write side of the output pipe, so read() will return immediately once the process has exited\n            posix.libc().close(outputPipe[1]);\n\n            ByteBuffer output = ByteBuffer.allocate(100);\n            long nbytes = posix.libc().read(outputPipe[0], output, output.remaining());\n            assertEquals(3L, nbytes);\n            output.position((int) nbytes).flip();\n            byte[] bytes = new byte[output.remaining()];\n            output.get(bytes);\n            assertEquals("foo", new String(bytes).trim());\n        } finally {\n            closePipe(outputPipe);\n            closePipe(inputPipe);\n            if (pid != -1) {\n                posix.libc().kill(pid, 9); // ensure the child process is killed\n            }\n        }\n    }\n}\n'}}polluter
:import:
[]polluter
:pom:
polluter
:toreplace:
{'field_names': [], 'method_names': ['inputPipe']}