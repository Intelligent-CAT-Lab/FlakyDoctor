Test File Path: od_projects/2d62a3e9da726942a93cf16b6e91c0187e6c0136/http-request/lib/src/test/java/com/github/kevinsawicki/http/HttpRequestTest.java
od_projects/2d62a3e9da726942a93cf16b6e91c0187e6c0136/http-request/lib/src/test/java/com/github/kevinsawicki/http/HttpRequestTest.java

    Original Polluter Method:
   public void customConnectionFactory() throws Exception {
    handler = new RequestHandler() {

      @Override
      public void handle(Request request, HttpServletResponse response) {
        response.setStatus(HTTP_OK);
      }
    };

    ConnectionFactory factory = new ConnectionFactory() {

      public HttpURLConnection create(URL otherUrl) throws IOException {
        return (HttpURLConnection) new URL(url).openConnection();
      }

      public HttpURLConnection create(URL url, Proxy proxy) throws IOException {
        throw new IOException();
      }
    };

    HttpRequest.setConnectionFactory(factory);
    int code = get("http://not/a/real/url").code();
    assertEquals(200, code);
  }
 

    Original Victim Method:
   public void postWithNumericQueryParams() throws Exception {
    Map<Object, Object> inputParams = new HashMap<Object, Object>();
    inputParams.put(1, 2);
    inputParams.put(3, 4);
    final Map<String, String> outputParams = new HashMap<String, String>();
    final AtomicReference<String> method = new AtomicReference<String>();
    handler = new RequestHandler() {

      @Override
      public void handle(Request request, HttpServletResponse response) {
        method.set(request.getMethod());
        outputParams.put("1", request.getParameter("1"));
        outputParams.put("3", request.getParameter("3"));
        response.setStatus(HTTP_OK);
      }
    };
    HttpRequest request = post(url, inputParams, false);
    assertTrue(request.ok());
    assertEquals("POST", method.get());
    assertEquals("2", outputParams.get("1"));
    assertEquals("4", outputParams.get("3"));
  }
 

    
victim_test_code:
public void postWithNumericQueryParams() throws Exception {
    Map<Object, Object> inputParams = new HashMap<Object, Object>();
    inputParams.put(1, 2);
    inputParams.put(3, 4);
    final Map<String, String> outputParams = new HashMap<String, String>();
    final AtomicReference<String> method = new AtomicReference<String>();
    handler = new RequestHandler() {

      @Override
      public void handle(Request request, HttpServletResponse response) {
        method.set(request.getMethod());
        outputParams.put("1", request.getParameter("1"));
        outputParams.put("3", request.getParameter("3"));
        response.setStatus(HTTP_OK);
      }
    };
    HttpRequest request = post(url, inputParams, false);
    assertTrue(request.ok());
    assertEquals("POST", method.get());
    assertEquals("2", outputParams.get("1"));
    assertEquals("4", outputParams.get("3"));
    clearHandler();
}

polluter_test_code:
public void customConnectionFactory() throws Exception {
    handler = new RequestHandler() {

      @Override
      public void handle(Request request, HttpServletResponse response) {
        response.setStatus(HTTP_OK);
      }
    };

    ConnectionFactory factory = new ConnectionFactory() {

      public HttpURLConnection create(URL otherUrl) throws IOException {
        return (HttpURLConnection) new URL(url).openConnection();
      }

      public HttpURLConnection create(URL url, Proxy proxy) throws IOException {
        throw new IOException();
      }
    };

    HttpRequest.setConnectionFactory(factory);
    int code = get("http://not/a/real/url").code();
    assertEquals(200, code);
    clearHandler();
    HttpRequest.setConnectionFactory(null);
}

import:
[]
pom:

 