test_before_fix:
    public void testSeveralActiveOneInactive() throws Exception {
        String clusterId = UUID.randomUUID().toString();
        ClusterViewBuilder builder = new ClusterViewBuilder(10, 2);
        ClusterView view = builder.active(2, 5, 6).inactive(3).asView(clusterId);

        // {"seq":10,"id":"35f60ed3-508d-4a81-b812-89f07f57db20","me":2,"active":[2],"deactivating":[],"inactive":[3]}
        JsonObject o = asJsonObject(view);
        Map<String, String> props = o.getProperties();
        assertEquals("10", props.get("seq"));
        assertEquals("true", props.get("final"));
        assertEquals(clusterId, unwrapString(props.get("id")));
        assertEquals("2", props.get("me"));
        assertEquals(asJsonArray(2, 5, 6), props.get("active"));
        assertEquals(asJsonArray(), props.get("deactivating"));
        assertEquals(asJsonArray(3), props.get("inactive"));
    }

test_after_fix:

code:
public void testSeveralActiveOneInactive() throws Exception { 
     String clusterId = UUID.randomUUID().toString(); 
     ClusterViewBuilder builder = new ClusterViewBuilder(10, 2); 
     ClusterView view = builder.active(2, 5, 6).inactive(3).asView(clusterId); 
  
     JsonObject o = asJsonObject(view); 
     Map<String, String> props = o.getProperties(); 
     assertEquals("10", props.get("seq")); 
     assertEquals("true", props.get("final")); 
     assertEquals(clusterId, unwrapString(props.get("id"))); 
     assertEquals("2", props.get("me")); 
      
     List<Integer> expectedActive = Arrays.asList(2, 5, 6); 
     List<Integer> actualActive = new Gson().fromJson(props.get("active"), new TypeToken<List<Integer>>(){}.getType()); 
     Collections.sort(expectedActive); 
     Collections.sort(actualActive); 
     assertEquals(expectedActive, actualActive); 
      
     assertEquals(asJsonArray(), props.get("deactivating")); 
      
     List<Integer> expectedInactive = Arrays.asList(3); 
     List<Integer> actualInactive = new Gson().fromJson(props.get("inactive"), new TypeToken<List<Integer>>(){}.getType()); 
     Collections.sort(expectedInactive); 
     Collections.sort(actualInactive); 
     assertEquals(expectedInactive, actualInactive); 
 } 
 
import:
['import com.google.gson.Gson;\n ', 'import com.google.gson.reflect.TypeToken;\n ', 'import java.util.Arrays;\n ', 'import java.util.Collections;\n ', 'import java.util.List;\n ']
pom:

<dependency>
    <groupId>com.google.code.gson</groupId>
    <artifactId>gson</artifactId>
    <version>2.8.6</version>
</dependency>
