Test File Path: projects/616ed866460ca909cb30a4eafb786c6040218ae8/dropwizard/dropwizard-jersey/src/test/java/io/dropwizard/jersey/errors/LoggingExceptionMapperTest.java

    Original Test Method:
     public void handlesMethodNotAllowedWithHeaders() {
        final Throwable thrown = catchThrowable(() -> target("/exception/json-mapping-exception")
            .request(MediaType.APPLICATION_JSON)
            .post(Entity.json("A"), String.class));
        assertThat(thrown).isInstanceOf(WebApplicationException.class);
        final Response resp = ((WebApplicationException) thrown).getResponse();
        assertThat(resp.getStatus()).isEqualTo(405);
        assertThat(resp.getHeaders()).contains(entry("Allow", Collections.singletonList("GET,OPTIONS")));
        assertThat(resp.readEntity(String.class)).isEqualTo("{\"code\":405,\"message\":\"HTTP 405 Method Not Allowed\"}");
    }

    
test_code:
public void handlesMethodNotAllowedWithHeaders() {
    final Throwable thrown = catchThrowable(() -> target("/exception/json-mapping-exception")
        .request(MediaType.APPLICATION_JSON)
        .post(Entity.json("A"), String.class));
    assertThat(thrown).isInstanceOf(WebApplicationException.class);
    final Response resp = ((WebApplicationException) thrown).getResponse();
    assertThat(resp.getStatus()).isEqualTo(405);
    List<Object> allowHeader = resp.getHeaders().get("Allow");
    if (allowHeader != null && !allowHeader.isEmpty()) {
        List<String> allowedMethods = new ArrayList<>(Arrays.asList(allowHeader.get(0).toString().split(",")));
        Collections.sort(allowedMethods);
        assertThat(allowedMethods).containsExactlyInAnyOrder("GET","OPTIONS");
    }
    assertThat(resp.readEntity(String.class)).isEqualTo("{\"code\":405,\"message\":\"HTTP 405 Method Not Allowed\"}");
}

import:
[]
pom:

