Test File Path: projects/e4b02936cc7d4ff2714e7231db0c4373ba5d48a2/admiral/request/src/test/java/com/vmware/admiral/request/util/LongURIGetServiceTest.java

    Original Test Method:
     public void testBadRequest() {

        // implicit content-type (= "application/json")

        String body = "whatever";

        Operation op = Operation
                .createPost(UriUtils.buildUri(host.getUri(), LongURIGetService.SELF_LINK))
                .setBody(body);

        FailureResponse failure = sender.sendAndWaitFailure(op);

        assertNotNull(failure.failure);
        assertEquals(Operation.MEDIA_TYPE_APPLICATION_JSON, failure.op.getContentType());
        assertEquals(Operation.STATUS_CODE_BAD_REQUEST, failure.op.getStatusCode());

        // explicit content-type

        op = Operation
                .createPost(UriUtils.buildUri(host.getUri(), LongURIGetService.SELF_LINK))
                .setContentType("application/html")
                .setBody(body);

        failure = sender.sendAndWaitFailure(op);

        assertNotNull(failure.failure);
        assertNotNull(failure.op.getBody(String.class));
        assertEquals(Operation.STATUS_CODE_BAD_REQUEST, failure.op.getStatusCode());

        // invalid target URI and content type

        LongURIRequest request = new LongURIRequest();
        request.uri = "<script>alert(\"surprise!\");</script>";

        op = Operation
                .createPost(UriUtils.buildUri(host.getUri(), LongURIGetService.SELF_LINK))
                .setContentType("application/html")
                .setBody(request);

        failure = sender.sendAndWaitFailure(op);

        assertNotNull(failure.failure);
        assertEquals(Operation.MEDIA_TYPE_APPLICATION_JSON, failure.op.getContentType());
        assertEquals(Operation.STATUS_CODE_NOT_FOUND, failure.op.getStatusCode());
        assertTrue(failure.op.getBody(String.class)
                .startsWith("{\"message\":\"Service not found:"));
    }

    
test_code:
public void testBadRequest() {

    // implicit content-type (= "application/json")

    String body = "whatever";

    Operation op = Operation
            .createPost(UriUtils.buildUri(host.getUri(), LongURIGetService.SELF_LINK))
            .setBody(body);

    FailureResponse failure = sender.sendAndWaitFailure(op);

    assertNotNull(failure.failure);
    assertEquals(Operation.MEDIA_TYPE_APPLICATION_JSON, failure.op.getContentType());
    assertEquals(Operation.STATUS_CODE_BAD_REQUEST, failure.op.getStatusCode());

    // explicit content-type

    op = Operation
            .createPost(UriUtils.buildUri(host.getUri(), LongURIGetService.SELF_LINK))
            .setContentType("application/html")
            .setBody(body);

    failure = sender.sendAndWaitFailure(op);

    assertNotNull(failure.failure);
    assertNotNull(failure.op.getBody(String.class));
    assertEquals(Operation.STATUS_CODE_BAD_REQUEST, failure.op.getStatusCode());

    // invalid target URI and content type

    LongURIRequest request = new LongURIRequest();
    request.uri = "<script>alert(\"surprise!\");</script>";

    op = Operation
            .createPost(UriUtils.buildUri(host.getUri(), LongURIGetService.SELF_LINK))
            .setContentType("application/html")
            .setBody(request);

    failure = sender.sendAndWaitFailure(op);

    assertNotNull(failure.failure);
    assertEquals(Operation.MEDIA_TYPE_APPLICATION_JSON, failure.op.getContentType());
    assertEquals(Operation.STATUS_CODE_NOT_FOUND, failure.op.getStatusCode());
    String bodyString = failure.op.getBody(String.class);
    JsonObject jsonObject = new JsonParser().parse(bodyString).getAsJsonObject();
    assertTrue(jsonObject.get("message").getAsString().startsWith("Service not found:"));
}

import:
[]
pom:

 