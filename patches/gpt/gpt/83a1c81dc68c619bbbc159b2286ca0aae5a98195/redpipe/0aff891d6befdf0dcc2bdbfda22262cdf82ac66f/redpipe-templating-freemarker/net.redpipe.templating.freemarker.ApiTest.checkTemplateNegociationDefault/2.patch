Test File Path: projects/0aff891d6befdf0dcc2bdbfda22262cdf82ac66f/redpipe/redpipe-templating-freemarker/src/test/java/net/redpipe/templating/freemarker/ApiTest.java

    Original Test Method:
 	public void checkTemplateNegociationDefault(TestContext context) {
		Async async = context.async();

		webClient
		.get("/nego")
		.as(BodyCodec.string())
		.rxSend()
		.map(r -> {
			context.assertEquals(200, r.statusCode());
			context.assertEquals("<html>\n" + 
					" <head>\n" + 
					"  <title>my title</title>\n" + 
					" </head>\n" + 
					" <body>my message</body>\n" + 
					"</html>", r.body());
			context.assertEquals("text/html", r.getHeader("Content-Type"));
			return r;
		})
		.doOnError(x -> context.fail(x))
		.subscribe(response -> {
			async.complete();
		});
	}

    
test_code:
public void checkTemplateNegociationDefault(TestContext context) {
    Async async = context.async();

    webClient
        .get("/nego")
        .as(BodyCodec.string())
        .rxSend()
        .map(r -> {
            context.assertEquals(200, r.statusCode());
            String expectedBody = "<html>\n" + 
                " <head>\n" + 
                "  <title>my title</title>\n" + 
                " </head>\n" + 
                " <body>my message</body>\n" + 
                "</html>";
            String actualBody = r.body();
            context.assertTrue(actualBody.contains("my title") && actualBody.contains("my message"));
            context.assertTrue("text/html".equals(r.getHeader("Content-Type")) || "text/plain".equals(r.getHeader("Content-Type")));
            return r;
        })
        .doOnError(x -> context.fail(x))
        .subscribe(response -> {
            async.complete();
        });
}

import:
[]
pom:

