Test File Path: projects/2bd752d868a8f3e36113b078bb576cf054e945e8/nifi/nifi-nar-bundles/nifi-stateless-processor-bundle/nifi-stateless-processor-tests/src/test/java/org/apache/nifi/processors/stateless/TestExecuteStateless.java

    Original Test Method:
     public void testSplitWithParameters() {
        runner.setProperty(ExecuteStateless.DATAFLOW_FILE, "src/test/resources/split-text.json");
        runner.setProperty(ExecuteStateless.INPUT_PORT, "In");
        runner.setProperty("Lines Per Split", "3");

        runner.enqueue("The\nQuick\nBrown\nFox\nJumps\nOver\nThe\nLazy\nDog".getBytes(), Collections.singletonMap("abc", "xyz"));
        runner.run();

        runner.assertTransferCount(ExecuteStateless.REL_OUTPUT, 3);
        final List<MockFlowFile> output = runner.getFlowFilesForRelationship(ExecuteStateless.REL_OUTPUT);
        output.forEach(ff -> ff.assertAttributeEquals("abc", "xyz"));
        output.get(0).assertContentEquals("The\nQuick\nBrown");
        output.get(1).assertContentEquals("Fox\nJumps\nOver");
        output.get(2).assertContentEquals("The\nLazy\nDog");
    }

    
test_code:
public void testSplitWithParameters() {
    runner.setProperty(ExecuteStateless.DATAFLOW_FILE, "src/test/resources/split-text.json");
    runner.setProperty(ExecuteStateless.INPUT_PORT, "In");
    runner.setProperty("Lines Per Split", "3");

    runner.enqueue("The\nQuick\nBrown\nFox\nJumps\nOver\nThe\nLazy\nDog".getBytes(), Collections.singletonMap("abc", "xyz"));
    runner.run();

    runner.assertTransferCount(ExecuteStateless.REL_OUTPUT, 3);
    final List<MockFlowFile> output = runner.getFlowFilesForRelationship(ExecuteStateless.REL_OUTPUT);
    output.forEach(ff -> ff.assertAttributeEquals("abc", "xyz"));

    List<String> expectedContents = Arrays.asList("The\nQuick\nBrown", "Fox\nJumps\nOver", "The\nLazy\nDog");
    List<String> actualContents = output.stream().map(MockFlowFile::getContent).collect(Collectors.toList());

    assertThat(actualContents, containsInAnyOrder(expectedContents.toArray()));
}

import:
['import static org.hamcrest.MatcherAssert.assertThat;', 'import static org.hamcrest.Matchers.containsInAnyOrder;', 'import java.util.Arrays;', 'import java.util.stream.Collectors;']
pom:

<dependency>
    <groupId>org.hamcrest</groupId>
    <artifactId>hamcrest-library</artifactId>
    <version>2.2</version>
    <scope>test</scope>
</dependency>
