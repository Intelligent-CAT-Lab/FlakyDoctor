Test File Path: projects/7ba9213012b72ea70edc6848c18ba6d90ff2c534/incubator-streampipes/streampipes-connect/src/test/java/org/apache/streampipes/connect/adapter/format/json/xml/XmlTest.java

    Original Test Method:
     public void parseEventCarPark() throws AdapterException {

        String jo = getCarParkExample();

        XmlParser parser = new XmlParser("parkhaus");

        List<byte[]> parsedEvent = parser.parseNEvents(getInputStream(jo), 1);

        assertEquals(6, parsedEvent.size());
        String parsedStringEvent = new String(parsedEvent.get(0), StandardCharsets.UTF_8);

        assertEquals("{\"frei\":0,\"tendenz\":3,\"bezeichnung\":\"bahnhof.txt\",\"zeitstempel\":\"25.07.2018 10:45\",\"gesamt\":114,\"lfdnr\":1,\"status\":1}", parsedStringEvent);
    }

    
test_code:
public void parseEventCarPark() throws AdapterException {

    String jo = getCarParkExample();

    XmlParser xmlParser = new XmlParser("parkhaus");

    List<byte[]> parsedEvent = xmlParser.parseNEvents(getInputStream(jo), 1);

    assertEquals(6, parsedEvent.size());
    String parsedStringEvent = new String(parsedEvent.get(0), StandardCharsets.UTF_8);

    // Parse the JSON strings to JSONObjects to compare them
    JSONObject expectedJson = new JSONObject("{\"frei\":0,\"tendenz\":3,\"bezeichnung\":\"bahnhof.txt\",\"zeitstempel\":\"25.07.2018 10:45\",\"gesamt\":114,\"lfdnr\":1,\"status\":1}");
    JSONObject actualJson = new JSONObject(parsedStringEvent);

    // Use JsonParser to ensure deterministic order
    JsonParser jsonParser = new JsonParser();
    JsonElement expectedElement = jsonParser.parse(expectedJson.toString());
    JsonElement actualElement = jsonParser.parse(actualJson.toString());

    assertEquals(expectedElement, actualElement);
}

import:
[]
pom:

<!-- No changes needed -->
