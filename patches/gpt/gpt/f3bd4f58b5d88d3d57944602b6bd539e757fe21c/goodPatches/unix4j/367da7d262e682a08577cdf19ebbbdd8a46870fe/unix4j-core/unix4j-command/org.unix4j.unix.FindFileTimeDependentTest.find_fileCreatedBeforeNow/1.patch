victim
:code:
{'fields': {}, 'methods': {'find_fileCreatedBeforeNow': 'public void find_fileCreatedBeforeNow(){\n    final CommandFileTest tester = new CommandFileTest(this.getClass());\n    final File currentDirectory = new File(tester.getInputFile().getParentFile().getPath() + "/default.input");\n    final Config config = new Config(tester, currentDirectory);\n    tester.runAndAssertIgnoringOrder(Unix4j.use(config).find(Find.Options.typeFile.timeOlder.timeCreate, ".", new Date()));\n}\n', 'find_fileCreatedAfterTime': 'public void find_fileCreatedAfterTime() throws InterruptedException {\n    final CommandFileTest tester = new CommandFileTest(this.getClass());\n    final File currentDirectory = new File(tester.getInputFile().getParentFile().getPath() + "/default.input");\n    final Config config = new Config(tester, currentDirectory);\n    final Date timeBeforeCreate = new Date();\n    Thread.sleep(1000);\n    Unix4j.echo("blah").toFile(currentDirectory.getPath() + "/" + FILE_TO_CREATE);\n    tester.runAndAssertIgnoringOrder(Unix4j.use(config).find(Find.Options.typeFile.timeNewer.timeCreate, ".", timeBeforeCreate));\n\n    \n\n    final File fileCreated = new File(currentDirectory.getPath() + "/" + FILE_TO_CREATE);\n    if (fileCreated.exists()) {\n        fileCreated.delete();\n    }\n    \n\n}\n'}}victim
:import:
[]victim
:pom:
victim
:toreplace:
{'field_names': [], 'method_names': ['find_fileCreatedBeforeNow', 'find_fileCreatedAfterTime']}polluter
:code:
{'fields': {}, 'methods': {'find_fileCreatedBeforeNow': 'public void find_fileCreatedBeforeNow(){\n    final CommandFileTest tester = new CommandFileTest(this.getClass());\n    final File currentDirectory = new File(tester.getInputFile().getParentFile().getPath() + "/default.input");\n    final Config config = new Config(tester, currentDirectory);\n    tester.runAndAssertIgnoringOrder(Unix4j.use(config).find(Find.Options.typeFile.timeOlder.timeCreate, ".", new Date()));\n}\n', 'find_fileCreatedAfterTime': 'public void find_fileCreatedAfterTime() throws InterruptedException {\n    final CommandFileTest tester = new CommandFileTest(this.getClass());\n    final File currentDirectory = new File(tester.getInputFile().getParentFile().getPath() + "/default.input");\n    final Config config = new Config(tester, currentDirectory);\n    final Date timeBeforeCreate = new Date();\n    Thread.sleep(1000);\n    Unix4j.echo("blah").toFile(currentDirectory.getPath() + "/" + FILE_TO_CREATE);\n    tester.runAndAssertIgnoringOrder(Unix4j.use(config).find(Find.Options.typeFile.timeNewer.timeCreate, ".", timeBeforeCreate));\n\n    \n\n    final File fileCreated = new File(currentDirectory.getPath() + "/" + FILE_TO_CREATE);\n    if (fileCreated.exists()) {\n        fileCreated.delete();\n    }\n    \n\n}\n'}}polluter
:import:
[]polluter
:pom:
polluter
:toreplace:
{'field_names': [], 'method_names': ['find_fileCreatedBeforeNow', 'find_fileCreatedAfterTime']}