Test File Path: dexfix_projects/87d63f677759336987fbb21fd9c688235618e7bb/graylog2-server/graylog2-server/src/test/java/org/graylog/plugins/views/search/rest/ViewSharingResourceTest.java

    Original Test Method:
     public void summarizeUsersReturnsListOfUsersIfCurrentUserIsNull() {
        this.currentUser = null;
        final User user1 = mock(User.class);
        when(user1.getName()).thenReturn("franz");
        when(user1.getFullName()).thenReturn("Franz Josef Strauss");
        final User user2 = mock(User.class);
        when(user2.getName()).thenReturn("friedrich");
        when(user2.getFullName()).thenReturn("Friedrich Merz");
        final User peter = mock(User.class);
        when(peter.getName()).thenReturn("peter");
        when(peter.getFullName()).thenReturn("Peter Altmaier");

        when(userService.loadAll()).thenReturn(ImmutableList.of(user1, user2, peter));

        final Set<UserShortSummary> users = this.viewSharingResource.summarizeUsers("viewId");

        assertThat(users).containsExactly(
                UserShortSummary.create("franz", "Franz Josef Strauss"),
                UserShortSummary.create("friedrich", "Friedrich Merz"),
                UserShortSummary.create("peter", "Peter Altmaier")
        );
    }

    
test_code:
public void summarizeUsersReturnsListOfUsersIfCurrentUserIsNull() {
    this.currentUser = null;
    final User user1 = mock(User.class);
    when(user1.getName()).thenReturn("franz");
    when(user1.getFullName()).thenReturn("Franz Josef Strauss");
    final User user2 = mock(User.class);
    when(user2.getName()).thenReturn("friedrich");
    when(user2.getFullName()).thenReturn("Friedrich Merz");
    final User peter = mock(User.class);
    when(peter.getName()).thenReturn("peter");
    when(peter.getFullName()).thenReturn("Peter Altmaier");

    when(userService.loadAll()).thenReturn(ImmutableList.of(user1, user2, peter));

    final List<UserShortSummary> users = new ArrayList<>(this.viewSharingResource.summarizeUsers("viewId"));

    assertThat(users).containsExactlyInAnyOrder(
            UserShortSummary.create("franz", "Franz Josef Strauss"),
            UserShortSummary.create("friedrich", "Friedrich Merz"),
            UserShortSummary.create("peter", "Peter Altmaier")
    );
}

import:
[]
pom:

