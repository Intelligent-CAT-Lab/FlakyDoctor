Test File Path: projects/521e742bfc034d66168e151e15e65e29a23b56c9/flink/flink-runtime/src/test/java/org/apache/flink/runtime/state/OperatorStateBackendTest.java

    Original Test Method:
     void testSnapshotRestoreAsync() throws Exception {
        OperatorStateBackend operatorStateBackend =
                new DefaultOperatorStateBackendBuilder(
                                OperatorStateBackendTest.class.getClassLoader(),
                                new ExecutionConfig(),
                                true,
                                emptyStateHandles,
                                new CloseableRegistry())
                        .build();

        ListStateDescriptor<MutableType> stateDescriptor1 =
                new ListStateDescriptor<>("test1", new JavaSerializer<MutableType>());
        ListStateDescriptor<MutableType> stateDescriptor2 =
                new ListStateDescriptor<>("test2", new JavaSerializer<MutableType>());
        ListStateDescriptor<MutableType> stateDescriptor3 =
                new ListStateDescriptor<>("test3", new JavaSerializer<MutableType>());

        MapStateDescriptor<MutableType, MutableType> broadcastStateDescriptor1 =
                new MapStateDescriptor<>(
                        "test4",
                        new JavaSerializer<MutableType>(),
                        new JavaSerializer<MutableType>());
        MapStateDescriptor<MutableType, MutableType> broadcastStateDescriptor2 =
                new MapStateDescriptor<>(
                        "test5",
                        new JavaSerializer<MutableType>(),
                        new JavaSerializer<MutableType>());
        MapStateDescriptor<MutableType, MutableType> broadcastStateDescriptor3 =
                new MapStateDescriptor<>(
                        "test6",
                        new JavaSerializer<MutableType>(),
                        new JavaSerializer<MutableType>());

        ListState<MutableType> listState1 = operatorStateBackend.getListState(stateDescriptor1);
        ListState<MutableType> listState2 = operatorStateBackend.getListState(stateDescriptor2);
        ListState<MutableType> listState3 =
                operatorStateBackend.getUnionListState(stateDescriptor3);

        BroadcastState<MutableType, MutableType> broadcastState1 =
                operatorStateBackend.getBroadcastState(broadcastStateDescriptor1);
        BroadcastState<MutableType, MutableType> broadcastState2 =
                operatorStateBackend.getBroadcastState(broadcastStateDescriptor2);
        BroadcastState<MutableType, MutableType> broadcastState3 =
                operatorStateBackend.getBroadcastState(broadcastStateDescriptor3);

        listState1.add(MutableType.of(42));
        listState1.add(MutableType.of(4711));

        listState2.add(MutableType.of(7));
        listState2.add(MutableType.of(13));
        listState2.add(MutableType.of(23));

        listState3.add(MutableType.of(17));
        listState3.add(MutableType.of(18));
        listState3.add(MutableType.of(19));
        listState3.add(MutableType.of(20));

        broadcastState1.put(MutableType.of(1), MutableType.of(2));
        broadcastState1.put(MutableType.of(2), MutableType.of(5));

        broadcastState2.put(MutableType.of(2), MutableType.of(5));

        BlockerCheckpointStreamFactory streamFactory =
                new BlockerCheckpointStreamFactory(1024 * 1024);

        OneShotLatch waiterLatch = new OneShotLatch();
        OneShotLatch blockerLatch = new OneShotLatch();

        streamFactory.setWaiterLatch(waiterLatch);
        streamFactory.setBlockerLatch(blockerLatch);

        RunnableFuture<SnapshotResult<OperatorStateHandle>> runnableFuture =
                operatorStateBackend.snapshot(
                        1, 1, streamFactory, CheckpointOptions.forCheckpointWithDefaultLocation());

        ExecutorService executorService = EXECUTOR_EXTENSION.getExecutor();

        executorService.submit(runnableFuture);

        // wait until the async checkpoint is in the write code, then continue
        waiterLatch.await();

        // do some mutations to the state, to test if our snapshot will NOT reflect them

        listState1.add(MutableType.of(77));

        broadcastState1.put(MutableType.of(32), MutableType.of(97));

        int n = 0;

        for (MutableType mutableType : listState2.get()) {
            if (++n == 2) {
                // allow the write code to continue, so that we could do changes while state is
                // written in parallel.
                blockerLatch.trigger();
            }
            mutableType.setValue(mutableType.getValue() + 10);
        }

        listState3.clear();
        broadcastState2.clear();

        operatorStateBackend.getListState(
                new ListStateDescriptor<>("test4", new JavaSerializer<MutableType>()));

        // run the snapshot
        SnapshotResult<OperatorStateHandle> snapshotResult = runnableFuture.get();
        OperatorStateHandle stateHandle = snapshotResult.getJobManagerOwnedSnapshot();

        try {

            operatorStateBackend.close();
            operatorStateBackend.dispose();

            AbstractStateBackend abstractStateBackend = new MemoryStateBackend(4096);
            CloseableRegistry cancelStreamRegistry = new CloseableRegistry();

            operatorStateBackend =
                    abstractStateBackend.createOperatorStateBackend(
                            createMockEnvironment(),
                            "testOperator",
                            StateObjectCollection.singleton(stateHandle),
                            cancelStreamRegistry);

            assertThat(operatorStateBackend.getRegisteredStateNames()).hasSize(3);
            assertThat(operatorStateBackend.getRegisteredBroadcastStateNames()).hasSize(3);

            listState1 = operatorStateBackend.getListState(stateDescriptor1);
            listState2 = operatorStateBackend.getListState(stateDescriptor2);
            listState3 = operatorStateBackend.getUnionListState(stateDescriptor3);

            broadcastState1 = operatorStateBackend.getBroadcastState(broadcastStateDescriptor1);
            broadcastState2 = operatorStateBackend.getBroadcastState(broadcastStateDescriptor2);
            broadcastState3 = operatorStateBackend.getBroadcastState(broadcastStateDescriptor3);

            assertThat(operatorStateBackend.getRegisteredStateNames()).hasSize(3);
            assertThat(operatorStateBackend.getRegisteredBroadcastStateNames()).hasSize(3);

            Iterator<MutableType> it = listState1.get().iterator();
            assertThat(it.next().value).isEqualTo(42);
            assertThat(it.next().value).isEqualTo(4711);
            assertThat(it).isExhausted();

            it = listState2.get().iterator();
            assertThat(it.next().value).isEqualTo(7);
            assertThat(it.next().value).isEqualTo(13);
            assertThat(it.next().value).isEqualTo(23);
            assertThat(it).isExhausted();

            it = listState3.get().iterator();
            assertThat(it.next().value).isEqualTo(17);
            assertThat(it.next().value).isEqualTo(18);
            assertThat(it.next().value).isEqualTo(19);
            assertThat(it.next().value).isEqualTo(20);
            assertThat(it).isExhausted();

            Iterator<Map.Entry<MutableType, MutableType>> bIt = broadcastState1.iterator();
            assertThat(bIt).hasNext();
            Map.Entry<MutableType, MutableType> entry = bIt.next();
            assertThat(entry.getKey().value).isOne();
            assertThat(entry.getValue().value).isEqualTo(2);
            assertThat(bIt).hasNext();
            entry = bIt.next();
            assertThat(entry.getKey().value).isEqualTo(2);
            assertThat(entry.getValue().value).isEqualTo(5);
            assertThat(bIt).isExhausted();

            bIt = broadcastState2.iterator();
            assertThat(bIt).hasNext();
            entry = bIt.next();
            assertThat(entry.getKey().value).isEqualTo(2);
            assertThat(entry.getValue().value).isEqualTo(5);
            assertThat(bIt).isExhausted();

            bIt = broadcastState3.iterator();
            assertThat(bIt).isExhausted();

            operatorStateBackend.close();
            operatorStateBackend.dispose();
        } finally {
            stateHandle.discardState();
        }

        executorService.shutdown();
    }

    
test_code:
void testSnapshotRestoreAsync() throws Exception {
    OperatorStateBackend operatorStateBackend =
            new DefaultOperatorStateBackendBuilder(
                            OperatorStateBackendTest.class.getClassLoader(),
                            new ExecutionConfig(),
                            true,
                            emptyStateHandles,
                            new CloseableRegistry())
                    .build();

    ListStateDescriptor<MutableType> stateDescriptor1 =
            new ListStateDescriptor<>("test1", new JavaSerializer<MutableType>());
    ListStateDescriptor<MutableType> stateDescriptor2 =
            new ListStateDescriptor<>("test2", new JavaSerializer<MutableType>());
    ListStateDescriptor<MutableType> stateDescriptor3 =
            new ListStateDescriptor<>("test3", new JavaSerializer<MutableType>());

    MapStateDescriptor<MutableType, MutableType> broadcastStateDescriptor1 =
            new MapStateDescriptor<>(
                    "test4",
                    new JavaSerializer<MutableType>(),
                    new JavaSerializer<MutableType>());
    MapStateDescriptor<MutableType, MutableType> broadcastStateDescriptor2 =
            new MapStateDescriptor<>(
                    "test5",
                    new JavaSerializer<MutableType>(),
                    new JavaSerializer<MutableType>());
    MapStateDescriptor<MutableType, MutableType> broadcastStateDescriptor3 =
            new MapStateDescriptor<>(
                    "test6",
                    new JavaSerializer<MutableType>(),
                    new JavaSerializer<MutableType>());

    ListState<MutableType> listState1 = operatorStateBackend.getListState(stateDescriptor1);
    ListState<MutableType> listState2 = operatorStateBackend.getListState(stateDescriptor2);
    ListState<MutableType> listState3 =
            operatorStateBackend.getUnionListState(stateDescriptor3);

    BroadcastState<MutableType, MutableType> broadcastState1 =
            operatorStateBackend.getBroadcastState(broadcastStateDescriptor1);
    BroadcastState<MutableType, MutableType> broadcastState2 =
            operatorStateBackend.getBroadcastState(broadcastStateDescriptor2);
    BroadcastState<MutableType, MutableType> broadcastState3 =
            operatorStateBackend.getBroadcastState(broadcastStateDescriptor3);

    listState1.add(MutableType.of(42));
    listState1.add(MutableType.of(4711));

    listState2.add(MutableType.of(7));
    listState2.add(MutableType.of(13));
    listState2.add(MutableType.of(23));

    listState3.add(MutableType.of(17));
    listState3.add(MutableType.of(18));
    listState3.add(MutableType.of(19));
    listState3.add(MutableType.of(20));

    broadcastState1.put(MutableType.of(1), MutableType.of(2));
    broadcastState1.put(MutableType.of(2), MutableType.of(5));

    broadcastState2.put(MutableType.of(2), MutableType.of(5));

    BlockerCheckpointStreamFactory streamFactory =
            new BlockerCheckpointStreamFactory(1024 * 1024);

    OneShotLatch waiterLatch = new OneShotLatch();
    OneShotLatch blockerLatch = new OneShotLatch();

    streamFactory.setWaiterLatch(waiterLatch);
    streamFactory.setBlockerLatch(blockerLatch);

    RunnableFuture<SnapshotResult<OperatorStateHandle>> runnableFuture =
            operatorStateBackend.snapshot(
                    1, 1, streamFactory, CheckpointOptions.forCheckpointWithDefaultLocation());

    ExecutorService executorService = EXECUTOR_EXTENSION.getExecutor();

    executorService.submit(runnableFuture);

    // wait until the async checkpoint is in the write code, then continue
    waiterLatch.await();

    // do some mutations to the state, to test if our snapshot will NOT reflect them

    listState1.add(MutableType.of(77));

    broadcastState1.put(MutableType.of(32), MutableType.of(97));

    int n = 0;

    for (MutableType mutableType : listState2.get()) {
        if (++n == 2) {
            // allow the write code to continue, so that we could do changes while state is
            // written in parallel.
            blockerLatch.trigger();
        }
        mutableType.setValue(mutableType.getValue() + 10);
    }

    listState3.clear();
    broadcastState2.clear();

    operatorStateBackend.getListState(
            new ListStateDescriptor<>("test4", new JavaSerializer<MutableType>()));

    // run the snapshot
    SnapshotResult<OperatorStateHandle> snapshotResult = runnableFuture.get();
    OperatorStateHandle stateHandle = snapshotResult.getJobManagerOwnedSnapshot();

    try {

        operatorStateBackend.close();
        operatorStateBackend.dispose();

        AbstractStateBackend abstractStateBackend = new MemoryStateBackend(4096);
        CloseableRegistry cancelStreamRegistry = new CloseableRegistry();

        operatorStateBackend =
                abstractStateBackend.createOperatorStateBackend(
                        createMockEnvironment(),
                        "testOperator",
                        StateObjectCollection.singleton(stateHandle),
                        cancelStreamRegistry);

        assertThat(operatorStateBackend.getRegisteredStateNames()).hasSize(3);
        assertThat(operatorStateBackend.getRegisteredBroadcastStateNames()).hasSize(3);

        listState1 = operatorStateBackend.getListState(stateDescriptor1);
        listState2 = operatorStateBackend.getListState(stateDescriptor2);
        listState3 = operatorStateBackend.getUnionListState(stateDescriptor3);

        broadcastState1 = operatorStateBackend.getBroadcastState(broadcastStateDescriptor1);
        broadcastState2 = operatorStateBackend.getBroadcastState(broadcastStateDescriptor2);
        broadcastState3 = operatorStateBackend.getBroadcastState(broadcastStateDescriptor3);

        assertThat(operatorStateBackend.getRegisteredStateNames()).hasSize(3);
        assertThat(operatorStateBackend.getRegisteredBroadcastStateNames()).hasSize(3);

        Iterator<MutableType> it = listState1.get().iterator();
        assertThat(it.next().value).isEqualTo(42);
        assertThat(it.next().value).isEqualTo(4711);
        assertThat(it).isExhausted();

        it = listState2.get().iterator();
        assertThat(it.next().value).isEqualTo(7);
        assertThat(it.next().value).isEqualTo(13);
        assertThat(it.next().value).isEqualTo(23);
        assertThat(it).isExhausted();

        it = listState3.get().iterator();
        assertThat(it.next().value).isEqualTo(17);
        assertThat(it.next().value).isEqualTo(18);
        assertThat(it.next().value).isEqualTo(19);
        assertThat(it.next().value).isEqualTo(20);
        assertThat(it).isExhausted();

        Map<MutableType, MutableType> broadcastState1Map = new LinkedHashMap<>();
        for (Map.Entry<MutableType, MutableType> entry : broadcastState1.entries()) {
            broadcastState1Map.put(entry.getKey(), entry.getValue());
        }
        assertThat(broadcastState1Map).containsOnly(
                new SimpleEntry<>(MutableType.of(1), MutableType.of(2)),
                new SimpleEntry<>(MutableType.of(2), MutableType.of(5)));

        Map<MutableType, MutableType> broadcastState2Map = new LinkedHashMap<>();
        for (Map.Entry<MutableType, MutableType> entry : broadcastState2.entries()) {
            broadcastState2Map.put(entry.getKey(), entry.getValue());
        }
        assertThat(broadcastState2Map).containsOnly(
                new SimpleEntry<>(MutableType.of(2), MutableType.of(5)));

        Map<MutableType, MutableType> broadcastState3Map = new LinkedHashMap<>();
        for (Map.Entry<MutableType, MutableType> entry : broadcastState3.entries()) {
            broadcastState3Map.put(entry.getKey(), entry.getValue());
        }
        assertThat(broadcastState3Map).isEmpty();

        operatorStateBackend.close();
        operatorStateBackend.dispose();
    } finally {
        stateHandle.discardState();
    }

    executorService.shutdown();
}

import:
['import java.util.AbstractMap.SimpleEntry;']
pom:

