victim
:code:
{'fields': {}, 'methods': {'test': '@Override        public boolean test(Throwable throwable) {\n            if (throwable instanceof TraceException) {\n                return true;\n            } else if (throwable instanceof IgnoreException) {\n                return false;\n            }\n            return false;\n        }\n', 'setExceptionsToIgnore': 'public void setExceptionsToIgnore() {\n    Tracer.ignoreClasses = null;\n    Tracer.traceClasses = null;\n    Tracer.setExceptionsToIgnore(IgnoreException.class, IgnoreException2.class);\n    Assert.assertFalse(Tracer.shouldTrace(new IgnoreException()));\n    Assert.assertFalse(Tracer.shouldTrace(new IgnoreExceptionSub()));\n    Assert.assertTrue(Tracer.shouldTrace(new Exception()));\n}\n', 'setExceptionPredicate': 'public void setExceptionPredicate() {\n    Predicate<Throwable> throwablePredicate = new Predicate<Throwable>() {\n        @Override\n        public boolean test(Throwable throwable) {\n            if (throwable instanceof TraceException) {\n                return true;\n            } else if (throwable instanceof IgnoreException) {\n                return false;\n            }\n            return false;\n        }\n    };\n    Tracer.setExceptionPredicate(throwablePredicate);\n    Assert.assertTrue(Tracer.shouldTrace(new TraceException()));\n    Assert.assertFalse(Tracer.shouldTrace(new IgnoreException()));\n\n    \n\n    // Reset the predicate to its default behavior\n    Predicate<Throwable> defaultThrowablePredicate = new Predicate<Throwable>() {\n        @Override\n        public boolean test(Throwable throwable) {\n            if (throwable instanceof IgnoreException || throwable instanceof IgnoreException2) {\n                return false;\n            }\n            return true;\n        }\n    };\n    Tracer.setExceptionPredicate(defaultThrowablePredicate);\n    \n\n}\n'}}victim
:import:
[]victim
:pom:
victim
:toreplace:
{'field_names': [], 'method_names': ['test', 'setExceptionsToIgnore', 'setExceptionPredicate']}polluter
:code:
{'fields': {}, 'methods': {'test': '@Override        public boolean test(Throwable throwable) {\n            if (throwable instanceof TraceException) {\n                return true;\n            } else if (throwable instanceof IgnoreException) {\n                return false;\n            }\n            return false;\n        }\n', 'setExceptionsToIgnore': 'public void setExceptionsToIgnore() {\n    Tracer.ignoreClasses = null;\n    Tracer.traceClasses = null;\n    Tracer.setExceptionsToIgnore(IgnoreException.class, IgnoreException2.class);\n    Assert.assertFalse(Tracer.shouldTrace(new IgnoreException()));\n    Assert.assertFalse(Tracer.shouldTrace(new IgnoreExceptionSub()));\n    Assert.assertTrue(Tracer.shouldTrace(new Exception()));\n}\n', 'setExceptionPredicate': 'public void setExceptionPredicate() {\n    Predicate<Throwable> throwablePredicate = new Predicate<Throwable>() {\n        @Override\n        public boolean test(Throwable throwable) {\n            if (throwable instanceof TraceException) {\n                return true;\n            } else if (throwable instanceof IgnoreException) {\n                return false;\n            }\n            return false;\n        }\n    };\n    Tracer.setExceptionPredicate(throwablePredicate);\n    Assert.assertTrue(Tracer.shouldTrace(new TraceException()));\n    Assert.assertFalse(Tracer.shouldTrace(new IgnoreException()));\n\n    \n\n    // Reset the predicate to its default behavior\n    Predicate<Throwable> defaultThrowablePredicate = new Predicate<Throwable>() {\n        @Override\n        public boolean test(Throwable throwable) {\n            if (throwable instanceof IgnoreException || throwable instanceof IgnoreException2) {\n                return false;\n            }\n            return true;\n        }\n    };\n    Tracer.setExceptionPredicate(defaultThrowablePredicate);\n    \n\n}\n'}}polluter
:import:
[]polluter
:pom:
polluter
:toreplace:
{'field_names': [], 'method_names': ['test', 'setExceptionsToIgnore', 'setExceptionPredicate']}