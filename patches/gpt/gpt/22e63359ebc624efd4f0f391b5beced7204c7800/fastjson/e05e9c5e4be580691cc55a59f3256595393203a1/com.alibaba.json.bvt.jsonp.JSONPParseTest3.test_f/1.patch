Test File Path: projects/e05e9c5e4be580691cc55a59f3256595393203a1/fastjson/src/test/java/com/alibaba/json/bvt/jsonp/JSONPParseTest3.java

    Original Test Method:
     public void test_f() throws Exception {
        String text = "parent.callback ({'id':1, 'name':'ido)nans'},1,2 );   /**/ ";

        JSONPObject jsonpObject = (JSONPObject) JSON.parseObject(text, JSONPObject.class);
        assertEquals("parent.callback", jsonpObject.getFunction());

        assertEquals(3, jsonpObject.getParameters().size());
        JSONObject param = (JSONObject) jsonpObject.getParameters().get(0);
        assertEquals(1, param.get("id"));
        assertEquals("ido)nans", param.get("name"));

        String json = JSON.toJSONString(jsonpObject, SerializerFeature.BrowserSecure);
        assertEquals("/**/parent.callback({\"name\":\"ido\\u0029nans\",\"id\":1},1,2)", json);
    }

    
test_code:
public void test_f() throws Exception {
    String text = "parent.callback ({'id':1, 'name':'ido)nans'},1,2 );   /**/ ";

    JSONPObject jsonpObject = (JSONPObject) JSON.parseObject(text, JSONPObject.class);
    assertEquals("parent.callback", jsonpObject.getFunction());

    assertEquals(3, jsonpObject.getParameters().size());
    JSONObject param = (JSONObject) jsonpObject.getParameters().get(0);
    assertEquals(1, param.get("id"));
    assertEquals("ido)nans", param.get("name"));

    String json = JSON.toJSONString(jsonpObject, SerializerFeature.BrowserSecure, SerializerFeature.MapSortField);
    assertEquals("/**/parent.callback({\"id\":1,\"name\":\"ido\\u0029nans\"},1,2)", json);
}

import:
[]
pom:

<dependency>
    <groupId>com.alibaba</groupId>
    <artifactId>fastjson</artifactId>
    <version>1.2.75</version>
</dependency>
