Test File Path: projects/91f1a89a0b515328109a659e445b1008d9db8769/graphhopper/isochrone/src/test/java/com/graphhopper/isochrone/algorithm/IsochroneTest.java

    Original Test Method:
     public void testSearch() {
        initDirectedAndDiffSpeed(graph);
        PMap pMap = new PMap();
        Isochrone instance = new Isochrone(graph, new FastestWeighting(carEncoder, pMap), false);
        // limit to certain seconds
        instance.setTimeLimit(60);
        List<Set<Integer>> res = instance.search(0, 5);
        assertEquals("[[0, 4], [6], [1, 7], [5], [2, 3]]", res.toString());

        instance = new Isochrone(graph, new FastestWeighting(carEncoder, pMap), false);
        instance.setTimeLimit(30);
        res = instance.search(0, 5);
        assertEquals("[[0], [4], [], [6], [1, 7]]", res.toString());
    }

    
test_code:
public void testSearch() {
    initDirectedAndDiffSpeed(graph);
    PMap pMap = new PMap();
    Isochrone instance = new Isochrone(graph, new FastestWeighting(carEncoder, pMap), false);
    // limit to certain seconds
    instance.setTimeLimit(60);
    List<Set<Integer>> res = instance.search(0, 5);
    List<Set<Integer>> expected = new ArrayList<>();
    expected.add(new LinkedHashSet<>(Arrays.asList(0, 4)));
    expected.add(new LinkedHashSet<>(Arrays.asList(6)));
    expected.add(new LinkedHashSet<>(Arrays.asList(1, 7)));
    expected.add(new LinkedHashSet<>(Arrays.asList(5)));
    expected.add(new LinkedHashSet<>(Arrays.asList(2, 3)));
    assertEquals(expected, res);

    instance = new Isochrone(graph, new FastestWeighting(carEncoder, pMap), false);
    instance.setTimeLimit(30);
    res = instance.search(0, 5);
    expected.clear();
    expected.add(new LinkedHashSet<>(Arrays.asList(0)));
    expected.add(new LinkedHashSet<>(Arrays.asList(4)));
    expected.add(new LinkedHashSet<Integer>());
    expected.add(new LinkedHashSet<>(Arrays.asList(6)));
    expected.add(new LinkedHashSet<>(Arrays.asList(1, 7)));
    assertEquals(expected, res);
}

import:
[]
pom:

