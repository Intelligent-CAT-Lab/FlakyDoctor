victim
:code:
{'fields': {}, 'methods': {'loadLocalizationThatDoesExistShouldLoad': 'public void loadLocalizationThatDoesExistShouldLoad() {\n    \n\n    Localization.initialize("sv", "SE");\n    assertEquals("Beskrivning", Localization.getString(DESCRIPTION_KEY));\n    assertEquals("sv", Locale.getDefault().getLanguage());\n    assertEquals("SE", Locale.getDefault().getCountry());\n\n    Locale.setDefault(Locale.ENGLISH);\n    \n\n}\n', 'testGetGrblVersion': 'public void testGetGrblVersion() throws Exception {\n    \n\n    // Reset the localization settings to English\n    Localization.initialize("en", "US");\n    \n\n\n    System.out.println("getGrblVersion");\n    GrblController instance = new GrblController(mgc);\n    String result;\n    String expResult;\n\n    expResult = "<Not connected>";\n    result = instance.getGrblVersion();\n    assertEquals(expResult, result);\n\n    instance.openCommPort(getSettings().getConnectionDriver(), "blah", 1234);\n    expResult = "Grbl 0.5b";\n    instance.rawResponseHandler(expResult);\n    result = instance.getGrblVersion();\n    assertEquals(expResult, result);\n\n    expResult = "Grbl 0.57";\n    instance.rawResponseHandler(expResult);\n    result = instance.getGrblVersion();\n    assertEquals(expResult, result);\n\n    expResult = "Grbl 0.8";\n    instance.rawResponseHandler(expResult);\n    result = instance.getGrblVersion();\n    assertEquals(expResult, result);\n\n    expResult = "Grbl 0.8c";\n    instance.rawResponseHandler(expResult);\n    result = instance.getGrblVersion();\n    assertEquals(expResult, result);\n}\n'}}victim
:import:
['import com.willwinder.universalgcodesender.i18n.Localization;\n ']victim
:pom:
victim
:toreplace:
{'field_names': [], 'method_names': ['loadLocalizationThatDoesExistShouldLoad', 'testGetGrblVersion']}polluter
:code:
{'fields': {}, 'methods': {'loadLocalizationThatDoesExistShouldLoad': 'public void loadLocalizationThatDoesExistShouldLoad() {\n    \n\n    Localization.initialize("sv", "SE");\n    assertEquals("Beskrivning", Localization.getString(DESCRIPTION_KEY));\n    assertEquals("sv", Locale.getDefault().getLanguage());\n    assertEquals("SE", Locale.getDefault().getCountry());\n\n    Locale.setDefault(Locale.ENGLISH);\n    \n\n}\n', 'testGetGrblVersion': 'public void testGetGrblVersion() throws Exception {\n    \n\n    // Reset the localization settings to English\n    Localization.initialize("en", "US");\n    \n\n\n    System.out.println("getGrblVersion");\n    GrblController instance = new GrblController(mgc);\n    String result;\n    String expResult;\n\n    expResult = "<Not connected>";\n    result = instance.getGrblVersion();\n    assertEquals(expResult, result);\n\n    instance.openCommPort(getSettings().getConnectionDriver(), "blah", 1234);\n    expResult = "Grbl 0.5b";\n    instance.rawResponseHandler(expResult);\n    result = instance.getGrblVersion();\n    assertEquals(expResult, result);\n\n    expResult = "Grbl 0.57";\n    instance.rawResponseHandler(expResult);\n    result = instance.getGrblVersion();\n    assertEquals(expResult, result);\n\n    expResult = "Grbl 0.8";\n    instance.rawResponseHandler(expResult);\n    result = instance.getGrblVersion();\n    assertEquals(expResult, result);\n\n    expResult = "Grbl 0.8c";\n    instance.rawResponseHandler(expResult);\n    result = instance.getGrblVersion();\n    assertEquals(expResult, result);\n}\n'}}polluter
:import:
['import com.willwinder.universalgcodesender.i18n.Localization;\n ']polluter
:pom:
polluter
:toreplace:
{'field_names': [], 'method_names': ['loadLocalizationThatDoesExistShouldLoad', 'testGetGrblVersion']}