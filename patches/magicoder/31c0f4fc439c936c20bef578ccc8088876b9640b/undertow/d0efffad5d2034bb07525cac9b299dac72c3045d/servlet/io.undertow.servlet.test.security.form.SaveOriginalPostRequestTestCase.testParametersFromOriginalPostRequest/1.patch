Test File Path: projects/d0efffad5d2034bb07525cac9b299dac72c3045d/undertow/servlet/src/test/java/io/undertow/servlet/test/security/form/SaveOriginalPostRequestTestCase.java

    Original Test Method:
     public void testParametersFromOriginalPostRequest() throws IOException {
        TestHttpClient client = createHttpClient();

        // let's test if a usual POST request have its parameters dumped in the response
        HttpResponse result = executePostRequest(client, "/servletContext/dumpRequest", new BasicNameValuePair("param1", "param1Value"), new BasicNameValuePair("param2", "param2Value"));
        assertEquals(StatusCodes.OK, result.getStatusLine().getStatusCode());
        String response = HttpClientUtils.readResponse(result);
        assertTrue(response.contains("param1=param1Value/param2=param2Value"));

        // this request should be saved and the client redirect to the login form.
        result = executePostRequest(client, "/servletContext/secured/dumpRequest", new BasicNameValuePair("securedParam1", "securedParam1Value"), new BasicNameValuePair("securedParam2", "securedParam2Value"));
        assertEquals(StatusCodes.OK, result.getStatusLine().getStatusCode());
        Assert.assertTrue(HttpClientUtils.readResponse(result).startsWith("j_security_check"));

        // let's perform a successful authentication and get the request restored
        result = executePostRequest(client, "/servletContext/j_security_check", new BasicNameValuePair("j_username", "user1"), new BasicNameValuePair("j_password", "password1"));
        assertEquals(StatusCodes.OK, result.getStatusLine().getStatusCode());
        response = HttpClientUtils.readResponse(result);

        // let's check if the original request was saved, including its parameters.
        assertTrue(response.contains("securedParam1=securedParam1Value"));
        assertTrue(response.contains("securedParam2=securedParam2Value"));
    }

    
test_code:
        public void testParametersFromOriginalPostRequest() throws IOException {
            TestHttpClient client = createHttpClient();

            // let's test if a usual POST request have its parameters dumped in the response
            HttpResponse result = executePostRequest(client, "/servletContext/dumpRequest", new BasicNameValuePair("param1", "param1Value"), new BasicNameValuePair("param2", "param2Value"));
            assertEquals(StatusCodes.OK, result.getStatusLine().getStatusCode());
            String response = HttpClientUtils.readResponse(result);
            assertTrue(response.contains("param1=param1Value"));
            assertTrue(response.contains("param2=param2Value"));

            // this request should be saved and the client redirect to the login form.
            result = executePostRequest(client, "/servletContext/secured/dumpRequest", new BasicNameValuePair("securedParam1", "securedParam1Value"), new BasicNameValuePair("securedParam2", "securedParam2Value"));
            assertEquals(StatusCodes.OK, result.getStatusLine().getStatusCode());
            Assert.assertTrue(HttpClientUtils.readResponse(result).startsWith("j_security_check"));

            // let's perform a successful authentication and get the request restored
            result = executePostRequest(client, "/servletContext/j_security_check", new BasicNameValuePair("j_username", "user1"), new BasicNameValuePair("j_password", "password1"));
            assertEquals(StatusCodes.OK, result.getStatusLine().getStatusCode());
            response = HttpClientUtils.readResponse(result);

            // let's check if the original request was saved, including its parameters.
            assertTrue(response.contains("securedParam1=securedParam1Value"));
            assertTrue(response.contains("securedParam2=securedParam2Value"));
        }

import:
[]
pom:
None