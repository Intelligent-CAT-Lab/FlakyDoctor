Test File Path: projects/fe934dc1b40227369f226611219886760458f6d2/openapi-generator/modules/openapi-generator/src/test/java/org/openapitools/codegen/typescript/SharedTypeScriptTest.java

    Original Test Method:
     public void toModelImportMapTest() {
        TypeScriptAxiosClientCodegen codegen = new TypeScriptAxiosClientCodegen();

        Map<String, String[]> types = new HashMap<String, String[]>() {{
            put("Schema & AnotherSchema", new String[]{ "Schema", "AnotherSchema" });
            put("Schema | AnotherSchema", new String[]{ "Schema", "AnotherSchema" });
            put("Schema & object", new String[]{ "Schema" });
            put("Schema | object", new String[]{ "Schema" });
        }};

        for (Map.Entry<String, String[]> entry : types.entrySet()) {
            String[] mapped = codegen.toModelImportMap(entry.getKey()).values().toArray(new String[0]);
            Assert.assertEquals(mapped, entry.getValue());
        }
    }

    
test_code:
        public void toModelImportMapTest() {
            TypeScriptAxiosClientCodegen codegen = new TypeScriptAxiosClientCodegen();

            Map<String, String[]> types = new LinkedHashMap<String, String[]>() {{
                put("Schema & AnotherSchema", new String[]{ "Schema", "AnotherSchema" });
                put("Schema | AnotherSchema", new String[]{ "Schema", "AnotherSchema" });
                put("Schema & object", new String[]{ "Schema" });
                put("Schema | object", new String[]{ "Schema" });
            }};

            for (Map.Entry<String, String[]> entry : types.entrySet()) {
                List<String> mapped = codegen.toModelImportMap(entry.getKey()).values().stream().collect(Collectors.toList());
                assertArrayEquals(mapped.toArray(), entry.getValue());
            }
        }

import:
['import java.util.stream.Collectors;']
pom:
        <!-- no dependencies needed -->