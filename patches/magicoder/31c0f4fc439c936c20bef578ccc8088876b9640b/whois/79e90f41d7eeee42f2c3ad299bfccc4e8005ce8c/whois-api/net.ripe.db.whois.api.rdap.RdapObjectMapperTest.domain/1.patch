Test File Path: projects/79e90f41d7eeee42f2c3ad299bfccc4e8005ce8c/whois/whois-api/src/test/java/net/ripe/db/whois/api/rdap/RdapObjectMapperTest.java

    Original Test Method:
     public void domain() {
        final Domain result = (Domain) map((RpslObject.parse("" +
                "domain:          2.1.2.1.5.5.5.2.0.2.1.e164.arpa\n" +
                "descr:           enum domain\n" +
                "admin-c:         TEST-PN\n" +
                "tech-c:          TEST-PN\n" +
                "zone-c:          TEST-PN\n" +
                "nserver:         ns.1.net\n" +
                "nserver:         ns.foo.net.0.0.193.in-addr.arpa. 10.0.0.0/32\n" +
                "mnt-by:          RIPE-NCC-MNT\n" +
                "ds-rdata:        52314 5 1 93B5837D4E5C063A3728FAA72BA64068F89B39DF\n" +
                "source:          TEST")));

        assertThat(result.getHandle(), is("2.1.2.1.5.5.5.2.0.2.1.e164.arpa"));
        assertThat(result.getLdhName(), is("2.1.2.1.5.5.5.2.0.2.1.e164.arpa"));
        assertThat(result.getUnicodeName(), is(nullValue()));

        assertThat(result.getNameservers(), hasSize(2));
        assertThat(result.getNameservers().get(0).getLdhName(), is("ns.1.net"));
        assertThat(result.getNameservers().get(1).getLdhName(), is("ns.foo.net.0.0.193.in-addr.arpa"));
        assertThat(result.getNameservers().get(1).getIpAddresses().getIpv4().get(0), is("10.0.0.0/32"));

        final Domain.SecureDNS secureDNS = result.getSecureDNS();
        assertThat(secureDNS.isDelegationSigned(), is(true));
        assertThat(secureDNS.getDsData().get(0).getAlgorithm(), is(5));
        assertThat(secureDNS.getDsData().get(0).getKeyTag(), is(52314L));
        assertThat(secureDNS.getDsData().get(0).getDigest(), is("93B5837D4E5C063A3728FAA72BA64068F89B39DF"));
        assertThat(secureDNS.getDsData().get(0).getDigestType(), is(1));

        final List<Entity> entities = result.getEntitySearchResults();
        assertThat(entities, hasSize(2));
        assertThat(entities.get(0).getHandle(), is("RIPE-NCC-MNT"));
        assertThat(entities.get(0).getRoles(), contains(Role.REGISTRANT));
        assertThat(entities.get(0).getVCardArray(), is(nullValue()));
        assertThat(entities.get(1).getHandle(), is("TEST-PN"));
        assertThat(entities.get(1).getRoles(), containsInAnyOrder(Role.ADMINISTRATIVE, Role.TECHNICAL, Role.ZONE));
        assertThat(entities.get(1).getVCardArray(), is(nullValue()));

        assertThat(result.getStatus(), is(emptyIterable()));
        assertThat(result.getPublicIds(), is(nullValue()));

        assertThat(result.getRemarks().get(0).getDescription().get(0), is("enum domain"));
        assertThat(result.getLinks(), hasSize(2));
        assertThat(result.getLinks().get(0).getRel(), is("self"));
        assertThat(result.getLinks().get(1).getRel(), is("copyright"));
        assertThat(result.getPort43(), is("whois.ripe.net"));

        assertThat(result.getEvents(), hasSize(1));
        assertThat(result.getEvents().get(0).getEventActor(), is(nullValue()));
        assertThat(result.getEvents().get(0).getEventAction(), is(Action.LAST_CHANGED));
        assertThat(result.getEvents().get(0).getEventDate(), is(VERSION_TIMESTAMP));
        assertThat(result.getEvents().get(0).getEventActor(), is(nullValue()));

        assertThat(result.getPort43(), is("whois.ripe.net"));
    }

    
test_code:
        public void domain() {
            final Domain result = (Domain) map((RpslObject.parse("" +
                    "domain:          2.1.2.1.5.5.5.2.0.2.1.e164.arpa\n" +
                    "descr:           enum domain\n" +
                    "admin-c:         TEST-PN\n" +
                    "tech-c:          TEST-PN\n" +
                    "zone-c:          TEST-PN\n" +
                    "nserver:         ns.1.net\n" +
                    "nserver:         ns.foo.net.0.0.193.in-addr.arpa. 10.0.0.0/32\n" +
                    "mnt-by:          RIPE-NCC-MNT\n" +
                    "ds-rdata:        52314 5 1 93B5837D4E5C063A3728FAA72BA64068F89B39DF\n" +
                    "source:          TEST")));

            List<Nameserver> nameservers = result.getNameservers();
            Collections.sort(nameservers, Comparator.comparing(Nameserver::getLdhName));

            assertThat(result.getHandle(), is("2.1.2.1.5.5.5.2.0.2.1.e164.arpa"));
            assertThat(result.getLdhName(), is("2.1.2.1.5.5.5.2.0.2.1.e164.arpa"));
            assertThat(result.getUnicodeName(), is(nullValue()));

            assertThat(result.getNameservers(), hasSize(2));
            assertThat(result.getNameservers().get(0).getLdhName(), is("ns.1.net"));
            assertThat(result.getNameservers().get(1).getLdhName(), is("ns.foo.net.0.0.193.in-addr.arpa"));
            assertThat(result.getNameservers().get(1).getIpAddresses().getIpv4().get(0), is("10.0.0.0/32"));

            final Domain.SecureDNS secureDNS = result.getSecureDNS();
            assertThat(secureDNS.isDelegationSigned(), is(true));
            assertThat(secureDNS.getDsData().get(0).getAlgorithm(), is(5));
            assertThat(secureDNS.getDsData().get(0).getKeyTag(), is(52314L));
            assertThat(secureDNS.getDsData().get(0).getDigest(), is("93B5837D4E5C063A3728FAA72BA64068F89B39DF"));
            assertThat(secureDNS.getDsData().get(0).getDigestType(), is(1));

            final List<Entity> entities = result.getEntitySearchResults();
            assertThat(entities, hasSize(2));
            assertThat(entities.get(0).getHandle(), is("RIPE-NCC-MNT"));
            assertThat(entities.get(0).getRoles(), contains(Role.REGISTRANT));
            assertThat(entities.get(0).getVCardArray(), is(nullValue()));
            assertThat(entities.get(1).getHandle(), is("TEST-PN"));
            assertThat(entities.get(1).getRoles(), containsInAnyOrder(Role.ADMINISTRATIVE, Role.TECHNICAL, Role.ZONE));
            assertThat(entities.get(1).getVCardArray(), is(nullValue()));

            assertThat(result.getStatus(), is(emptyIterable()));
            assertThat(result.getPublicIds(), is(nullValue()));

            assertThat(result.getRemarks().get(0).getDescription().get(0), is("enum domain"));
            assertThat(result.getLinks(), hasSize(2));
            assertThat(result.getLinks().get(0).getRel(), is("self"));
            assertThat(result.getLinks().get(1).getRel(), is("copyright"));
            assertThat(result.getPort43(), is("whois.ripe.net"));

            assertThat(result.getEvents(), hasSize(1));
            assertThat(result.getEvents().get(0).getEventActor(), is(nullValue()));
            assertThat(result.getEvents().get(0).getEventAction(), is(Action.LAST_CHANGED));
            assertThat(result.getEvents().get(0).getEventDate(), is(VERSION_TIMESTAMP));
            assertThat(result.getEvents().get(0).getEventActor(), is(nullValue()));

            assertThat(result.getPort43(), is("whois.ripe.net"));
        }

import:
['import org.hamcrest.MatcherAssert;', 'import org.hamcrest.Matchers;', 'import java.util.Comparator;']
pom:
        <!-- pom.xml -->