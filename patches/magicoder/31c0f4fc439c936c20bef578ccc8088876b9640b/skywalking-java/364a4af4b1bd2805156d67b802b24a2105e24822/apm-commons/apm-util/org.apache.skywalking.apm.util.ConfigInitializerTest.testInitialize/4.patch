Test File Path: projects/364a4af4b1bd2805156d67b802b24a2105e24822/skywalking-java/apm-commons/apm-util/src/test/java/org/apache/skywalking/apm/util/ConfigInitializerTest.java

    Original Test Method:
     public void testInitialize() throws IllegalAccessException {
        Properties properties = new Properties();
        properties.put("Level1Object.STR_ATTR".toLowerCase(), "stringValue");
        properties.put("Level1Object.Level2Object.INT_ATTR".toLowerCase(), "1000");
        properties.put("Level1Object.Level2Object.LONG_ATTR".toLowerCase(), "1000");
        properties.put("Level1Object.Level2Object.BOOLEAN_ATTR".toLowerCase(), "true");
        properties.put("Level1Object.LIST_STR_ATTR".toLowerCase(), "a,b,c");
        properties.put("Level1Object.LIST_INT_ATTR".toLowerCase(), "1,2,3");
        properties.put("Level1Object.LIST_STR_EMPTY_ATTR".toLowerCase(), "");
        properties.put("Level1Object.LIST_BOOL_ATTR".toLowerCase(), "true,false");
        properties.put("Level1Object.LIST_INT_ATTR_ED".toLowerCase(), ""); // clear list
        properties.put("Level1Object.Level2Object.ENUM_ATTR".toLowerCase(), "RED");
        properties.put("Level1Object.SET_STR_ATTR".toLowerCase(), "a,b,c,d,b");
        properties.put("Level1Object.SET_STR_EMPTY_ATTR".toLowerCase(), "");
        properties.put("Level1Object.SET_INT_ATTR".toLowerCase(), "1,2,3,4,4");
        properties.put("Level1Object.SET_BOOL_ATTR".toLowerCase(), "true,true");
        properties.put("Level1Object.MAP_1[a]".toLowerCase(), "1");
        properties.put("Level1Object.MAP_1[b]".toLowerCase(), "2");
        properties.put("Level1Object.MAP_2[]".toLowerCase(), ""); // clear map
        properties.put("Level1Object.MAP_4[c]".toLowerCase(), "3");

        ConfigInitializer.initialize(properties, TestPropertiesObject.class);

        Assert.assertEquals("stringValue", TestPropertiesObject.Level1Object.STR_ATTR);
        Assert.assertEquals(1000, TestPropertiesObject.Level1Object.Level2Object.INT_ATTR);
        Assert.assertEquals(1000, TestPropertiesObject.Level1Object.Level2Object.INT_ATTR_100);
        Assert.assertEquals(1000L, TestPropertiesObject.Level1Object.Level2Object.LONG_ATTR);
        Assert.assertTrue(TestPropertiesObject.Level1Object.Level2Object.BOOLEAN_ATTR);
        Assert.assertTrue(TestPropertiesObject.Level1Object.Level2Object.BOOLEAN_ATTR_TRUE);
        Assert.assertArrayEquals(new String[]{}, TestPropertiesObject.Level1Object.LIST_STR_EMPTY_ATTR.toArray());
        Assert.assertArrayEquals(new String[]{"a", "b", "c"}, TestPropertiesObject.Level1Object.LIST_STR_ATTR.toArray());
        Assert.assertArrayEquals(new Integer[]{1, 2, 3}, TestPropertiesObject.Level1Object.LIST_INT_ATTR.toArray());
        Assert.assertArrayEquals(new Integer[]{}, TestPropertiesObject.Level1Object.LIST_INT_ATTR_ED.toArray());
        Assert.assertArrayEquals(new Integer[]{1, 2, 3, 4}, TestPropertiesObject.Level1Object.LIST_INT_ATTR_ED2.toArray());
        Assert.assertArrayEquals(new String[]{}, TestPropertiesObject.Level1Object.SET_STR_EMPTY_ATTR.toArray());
        Assert.assertArrayEquals(new Boolean[]{true, false}, TestPropertiesObject.Level1Object.LIST_BOOL_ATTR.toArray());
        Assert.assertArrayEquals(new String[]{"a", "b", "c", "d"}, TestPropertiesObject.Level1Object.SET_STR_ATTR.toArray());
        Assert.assertArrayEquals(new Integer[]{1, 2, 3, 4}, TestPropertiesObject.Level1Object.SET_INT_ATTR.toArray());
        Assert.assertArrayEquals(new Boolean[]{true}, TestPropertiesObject.Level1Object.SET_BOOL_ATTR.toArray());
        Assert.assertEquals(TestColorEnum.RED, TestPropertiesObject.Level1Object.Level2Object.ENUM_ATTR);
        //make sure that when descs is empty,toString() work right;
        Assert.assertEquals(new ConfigDesc().toString(), "");

        HashMap<String, Integer> objectObjectHashMap = new HashMap<>();
        objectObjectHashMap.put("a", 1);
        objectObjectHashMap.put("b", 2);
        Assert.assertEquals(TestPropertiesObject.Level1Object.MAP_1, objectObjectHashMap);
        Assert.assertEquals(TestPropertiesObject.Level1Object.MAP_2, new HashMap<>());

        Assert.assertEquals(TestPropertiesObject.Level1Object.MAP_3.size(), 2);
        Assert.assertEquals(TestPropertiesObject.Level1Object.MAP_3.get("a"), Integer.valueOf(1));
        Assert.assertEquals(TestPropertiesObject.Level1Object.MAP_3.get("b"), Integer.valueOf(2));

        Assert.assertEquals(Integer.valueOf(TestPropertiesObject.Level1Object.MAP_4.size()), Integer.valueOf(1));
        Assert.assertEquals(TestPropertiesObject.Level1Object.MAP_4.get("c"), Integer.valueOf(3));
    }

    
test_code:
        public void testInitialize() throws IllegalAccessException {
            Properties properties = new Properties();
            properties.put("level1object.str_attr".toLowerCase(), "stringValue");
            properties.put("level1object.level2object.int_attr".toLowerCase(), "1000");
            properties.put("level1object.level2object.long_attr".toLowerCase(), "1000");
            properties.put("level1object.level2object.boolean_attr".toLowerCase(), "true");
            properties.put("level1object.list_str_attr".toLowerCase(), "a,b,c");
            properties.put("level1object.list_int_attr".toLowerCase(), "1,2,3");
            properties.put("level1object.list_str_empty_attr".toLowerCase(), "");
            properties.put("level1object.list_bool_attr".toLowerCase(), "true,false");
            properties.put("level1object.list_int_attr_ed".toLowerCase(), ""); // clear list
            properties.put("level1object.level2object.enum_attr".toLowerCase(), "RED");
            properties.put("level1object.set_str_attr".toLowerCase(), "a,b,c,d,b");
            properties.put("level1object.set_str_empty_attr".toLowerCase(), "");
            properties.put("level1object.set_int_attr".toLowerCase(), "1,2,3,4,4");
            properties.put("level1object.set_bool_attr".toLowerCase(), "true,true");
            properties.put("level1object.map_1[a]".toLowerCase(), "1");
            properties.put("level1object.map_1[b]".toLowerCase(), "2");
            properties.put("level1object.map_2[]".toLowerCase(), ""); // clear map
            properties.put("level1object.map_4[c]".toLowerCase(), "3");

            ConfigInitializer.initialize(properties, TestPropertiesObject.class);

            Assert.assertEquals("stringValue", TestPropertiesObject.Level1Object.STR_ATTR);
            Assert.assertEquals(1000, TestPropertiesObject.Level1Object.Level2Object.INT_ATTR);
            Assert.assertEquals(1000, TestPropertiesObject.Level1Object.Level2Object.INT_ATTR_100);
            Assert.assertEquals(1000L, TestPropertiesObject.Level1Object.Level2Object.LONG_ATTR);
            Assert.assertTrue(TestPropertiesObject.Level1Object.Level2Object.BOOLEAN_ATTR);
            Assert.assertTrue(TestPropertiesObject.Level1Object.Level2Object.BOOLEAN_ATTR_TRUE);
            Assert.assertArrayEquals(new String[]{}, TestPropertiesObject.Level1Object.LIST_STR_EMPTY_ATTR.toArray());
            Assert.assertArrayEquals(new String[]{"a", "b", "c"}, TestPropertiesObject.Level1Object.LIST_STR_ATTR.toArray());
            Assert.assertArrayEquals(new Integer[]{1, 2, 3}, TestPropertiesObject.Level1Object.LIST_INT_ATTR.toArray());
            Assert.assertArrayEquals(new Integer[]{}, TestPropertiesObject.Level1Object.LIST_INT_ATTR_ED.toArray());
            Assert.assertArrayEquals(new Integer[]{1, 2, 3, 4}, TestPropertiesObject.Level1Object.LIST_INT_ATTR_ED2.toArray());
            Assert.assertArrayEquals(new String[]{}, TestPropertiesObject.Level1Object.SET_STR_EMPTY_ATTR.toArray());
            Assert.assertArrayEquals(new Boolean[]{true, false}, TestPropertiesObject.Level1Object.LIST_BOOL_ATTR.toArray());
            Assert.assertArrayEquals(new String[]{"a", "b", "c", "d"}, TestPropertiesObject.Level1Object.SET_STR_ATTR.stream().sorted().toArray());
            Assert.assertArrayEquals(new Integer[]{1, 2, 3, 4}, TestPropertiesObject.Level1Object.SET_INT_ATTR.stream().sorted().toArray());
            Assert.assertArrayEquals(new Boolean[]{true}, TestPropertiesObject.Level1Object.SET_BOOL_ATTR.stream().sorted().toArray());
            Assert.assertEquals(TestColorEnum.RED, TestPropertiesObject.Level1Object.Level2Object.ENUM_ATTR);
            //make sure that when descs is empty,toString() work right;
            Assert.assertEquals(new ConfigDesc().toString(), "");

            HashMap<String, Integer> objectObjectHashMap = new HashMap<>();
            objectObjectHashMap.put("a", 1);
            objectObjectHashMap.put("b", 2);
            Assert.assertEquals(TestPropertiesObject.Level1Object.MAP_1, objectObjectHashMap);
            Assert.assertEquals(TestPropertiesObject.Level1Object.MAP_2, new HashMap<>());

            Assert.assertEquals(TestPropertiesObject.Level1Object.MAP_3.size(), 2);
            Assert.assertEquals(TestPropertiesObject.Level1Object.MAP_3.get("a"), Integer.valueOf(1));
            Assert.assertEquals(TestPropertiesObject.Level1Object.MAP_3.get("b"), Integer.valueOf(2));

            Assert.assertEquals(Integer.valueOf(TestPropertiesObject.Level1Object.MAP_4.size()), Integer.valueOf(1));
            Assert.assertEquals(TestPropertiesObject.Level1Object.MAP_4.get("c"), Integer.valueOf(3));
        }

import:
[]
pom:
        <!-- no dependencies needed -->