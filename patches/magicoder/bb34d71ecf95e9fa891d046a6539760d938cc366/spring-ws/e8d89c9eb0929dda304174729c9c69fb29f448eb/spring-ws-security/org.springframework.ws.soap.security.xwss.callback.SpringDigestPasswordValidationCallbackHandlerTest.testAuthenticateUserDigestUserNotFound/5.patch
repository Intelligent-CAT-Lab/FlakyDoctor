Test File Path: od_projects/e8d89c9eb0929dda304174729c9c69fb29f448eb/spring-ws/spring-ws-security/src/test/java/org/springframework/ws/soap/security/xwss/callback/SpringDigestPasswordValidationCallbackHandlerTest.java
od_projects/e8d89c9eb0929dda304174729c9c69fb29f448eb/spring-ws/spring-ws-security/src/test/java/org/springframework/ws/soap/security/wss4j2/callback/SpringSecurityPasswordValidationCallbackHandlerTest.java

    Original Polluter Method:
 	public void testHandleUsernameTokenPrincipal() throws Exception {
		UserDetailsService userDetailsService = createMock(UserDetailsService.class);
		callbackHandler.setUserDetailsService(userDetailsService);

		expect(userDetailsService.loadUserByUsername("Ernie")).andReturn(user).anyTimes();

		replay(userDetailsService);

		callbackHandler.handleUsernameTokenPrincipal(callback);
		SecurityContext context = SecurityContextHolder.getContext();
		Assert.assertNotNull("SecurityContext must not be null", context);
		Authentication authentication = context.getAuthentication();
		Assert.assertNotNull("Authentication must not be null", authentication);
		Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();
		Assert.assertTrue("GrantedAuthority[] must not be null or empty",
				(authorities != null && authorities.size() > 0));
		Assert.assertEquals("Unexpected authority", grantedAuthority, authorities.iterator().next());

		verify(userDetailsService);
	}
 

    Original Victim Method:
 	public void testAuthenticateUserDigestUserNotFound() throws Exception {
		expect(userDetailsService.loadUserByUsername(username)).andThrow(new UsernameNotFoundException(username));

		replay(userDetailsService);

		callbackHandler.handleInternal(callback);
		boolean authenticated = callback.getResult();
		Assert.assertFalse("Authenticated", authenticated);
		Assert.assertNull("Authentication created", SecurityContextHolder.getContext().getAuthentication());

		verify(userDetailsService);
	}
 

    
victim_test_code:
        public void testAuthenticateUserDigestUserNotFound() throws Exception {
            expect(userDetailsService.loadUserByUsername(username)).andThrow(new UsernameNotFoundException(username));

            replay(userDetailsService);

            callbackHandler.handleInternal(callback);
            SecurityContextHolder.clearContext(); // Added line
            boolean authenticated = callback.getResult();
            Assert.assertFalse("Authenticated", authenticated);
            Assert.assertNull("Authentication created", SecurityContextHolder.getContext().getAuthentication());

            verify(userDetailsService);
        }

polluter_test_code:
        public void testHandleUsernameTokenPrincipal() throws Exception {
            UserDetailsService userDetailsService = createMock(UserDetailsService.class);
            callbackHandler.setUserDetailsService(userDetailsService);

            expect(userDetailsService.loadUserByUsername("Ernie")).andReturn(user).anyTimes();

            replay(userDetailsService);

            callbackHandler.handleUsernameTokenPrincipal(callback);
            SecurityContext context = SecurityContextHolder.getContext();
            Assert.assertNotNull("SecurityContext must not be null", context);
            Authentication authentication = context.getAuthentication();
            Assert.assertNotNull("Authentication must not be null", authentication);
            Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();
            Assert.assertTrue("GrantedAuthority[] must not be null or empty",
                    (authorities != null && authorities.size() > 0));
            Assert.assertEquals("Unexpected authority", grantedAuthority, authorities.iterator().next());

            verify(userDetailsService);
        }

import:
[]
pom:
None