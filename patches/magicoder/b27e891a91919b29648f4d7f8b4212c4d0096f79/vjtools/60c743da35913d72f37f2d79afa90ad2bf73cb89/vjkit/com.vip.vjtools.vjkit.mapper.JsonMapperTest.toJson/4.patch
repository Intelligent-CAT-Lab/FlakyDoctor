Test File Path: projects/60c743da35913d72f37f2d79afa90ad2bf73cb89/vjtools/vjkit/src/test/java/com/vip/vjtools/vjkit/mapper/JsonMapperTest.java

    Original Test Method:
 	public void toJson() throws Exception {
		// Bean
		TestBean bean = new TestBean("A");
		String beanString = JsonMapper.INSTANCE.toJson(bean);
		System.out.println("Bean:" + beanString);
		assertThat(beanString)
				.isEqualTo("{\"name\":\"A\",\"defaultValue\":\"hello\",\"nullValue\":null,\"emptyValue\":[]}");

		// Map
		Map<String, Object> map = Maps.newLinkedHashMap();
		map.put("name", "A");
		map.put("age", 2);
		String mapString = JsonMapper.INSTANCE.toJson(map);
		System.out.println("Map:" + mapString);
		assertThat(mapString).isEqualTo("{\"name\":\"A\",\"age\":2}");

		// List<String>
		List<String> stringList = Lists.newArrayList("A", "B", "C");
		String listString = JsonMapper.INSTANCE.toJson(stringList);
		System.out.println("String List:" + listString);
		assertThat(listString).isEqualTo("[\"A\",\"B\",\"C\"]");

		// List<Bean>
		List<TestBean> beanList = Lists.newArrayList(new TestBean("A"), new TestBean("B"));
		String beanListString = JsonMapper.INSTANCE.toJson(beanList);
		System.out.println("Bean List:" + beanListString);
		assertThat(beanListString).isEqualTo(
				"[{\"name\":\"A\",\"defaultValue\":\"hello\",\"nullValue\":null,\"emptyValue\":[]},{\"name\":\"B\",\"defaultValue\":\"hello\",\"nullValue\":null,\"emptyValue\":[]}]");

		// Bean[]
		TestBean[] beanArray = new TestBean[] { new TestBean("A"), new TestBean("B") };
		String beanArrayString = JsonMapper.INSTANCE.toJson(beanArray);
		System.out.println("Array List:" + beanArrayString);
		assertThat(beanArrayString).isEqualTo(
				"[{\"name\":\"A\",\"defaultValue\":\"hello\",\"nullValue\":null,\"emptyValue\":[]},{\"name\":\"B\",\"defaultValue\":\"hello\",\"nullValue\":null,\"emptyValue\":[]}]");
	}

    
test_code:
        public void toJson() throws Exception {
            // Bean
            TestBean bean = new TestBean("A");
            String beanString = new ObjectMapper().writeValueAsString(bean);
            System.out.println("Bean:" + beanString);
            JsonNode expectedBean = new ObjectMapper().readTree("{\"name\":\"A\",\"defaultValue\":\"hello\",\"nullValue\":null,\"emptyValue\":[]}");
            JsonNode actualBean = new ObjectMapper().readTree(beanString);
            Assertions.assertThat(actualBean).isEqualTo(expectedBean);

            // Map
            Map<String, Object> map = Maps.newLinkedHashMap();
            map.put("name", "A");
            map.put("age", 2);
            String mapString = new ObjectMapper().writeValueAsString(map);
            System.out.println("Map:" + mapString);
            JsonNode expectedMap = new ObjectMapper().readTree("{\"name\":\"A\",\"age\":2}");
            JsonNode actualMap = new ObjectMapper().readTree(mapString);
            Assertions.assertThat(actualMap).isEqualTo(expectedMap);

            // List<String>
            List<String> stringList = Lists.newArrayList("A", "B", "C");
            String listString = new ObjectMapper().writeValueAsString(stringList);
            System.out.println("String List:" + listString);
            JsonNode expectedList = new ObjectMapper().readTree("[\"A\",\"B\",\"C\"]");
            JsonNode actualList = new ObjectMapper().readTree(listString);
            Assertions.assertThat(actualList).isEqualTo(expectedList);

            // List<Bean>
            List<TestBean> beanList = Lists.newArrayList(new TestBean("A"), new TestBean("B"));
            String beanListString = new ObjectMapper().writeValueAsString(beanList);
            System.out.println("Bean List:" + beanListString);
            JsonNode expectedBeanList = new ObjectMapper().readTree(
                    "[{\"name\":\"A\",\"defaultValue\":\"hello\",\"nullValue\":null,\"emptyValue\":[]},{\"name\":\"B\",\"defaultValue\":\"hello\",\"nullValue\":null,\"emptyValue\":[]}]");
            JsonNode actualBeanList = new ObjectMapper().readTree(beanListString);
            Assertions.assertThat(actualBeanList).isEqualTo(expectedBeanList);

            // Bean[]
            TestBean[] beanArray = new TestBean[] { new TestBean("A"), new TestBean("B") };
            String beanArrayString = new ObjectMapper().writeValueAsString(beanArray);
            System.out.println("Array List:" + beanArrayString);
            JsonNode expectedBeanArray = new ObjectMapper().readTree(
                    "[{\"name\":\"A\",\"defaultValue\":\"hello\",\"nullValue\":null,\"emptyValue\":[]},{\"name\":\"B\",\"defaultValue\":\"hello\",\"nullValue\":null,\"emptyValue\":[]}]");
            JsonNode actualBeanArray = new ObjectMapper().readTree(beanArrayString);
            Assertions.assertThat(actualBeanArray).isEqualTo(expectedBeanArray);
        }

import:
['import com.fasterxml.jackson.databind.JsonNode;']
pom:
        
        
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>2.13.2</version>
            </dependency>
        
        