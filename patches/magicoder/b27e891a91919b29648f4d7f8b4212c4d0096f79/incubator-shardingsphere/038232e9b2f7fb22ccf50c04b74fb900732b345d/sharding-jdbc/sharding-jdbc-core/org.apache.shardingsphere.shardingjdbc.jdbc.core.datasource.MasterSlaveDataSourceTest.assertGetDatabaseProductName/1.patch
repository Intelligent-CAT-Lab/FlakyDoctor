Test File Path: projects/038232e9b2f7fb22ccf50c04b74fb900732b345d/incubator-shardingsphere/sharding-jdbc/sharding-jdbc-core/src/test/java/org/apache/shardingsphere/shardingjdbc/jdbc/core/datasource/MasterSlaveDataSourceTest.java

    Original Test Method:
     public void assertGetDatabaseProductName() throws SQLException {
        DataSource masterDataSource = mock(DataSource.class);
        DataSource slaveDataSource1 = mock(DataSource.class);
        DataSource slaveDataSource2 = mock(DataSource.class);
        Connection masterConnection = mockConnection("jdbc:h2:mem:test_ds;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL");
        Connection slaveConnection1 = mockConnection("jdbc:h2:mem:test_ds;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL");
        Connection slaveConnection2 = mockConnection("jdbc:h2:mem:test_ds;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL");
        when(masterDataSource.getConnection()).thenReturn(masterConnection);
        when(slaveDataSource1.getConnection()).thenReturn(slaveConnection1);
        when(slaveDataSource2.getConnection()).thenReturn(slaveConnection2);
        Map<String, DataSource> dataSourceMap = new HashMap<>(3, 1);
        dataSourceMap.put("masterDataSource", masterDataSource);
        dataSourceMap.put("slaveDataSource1", slaveDataSource1);
        dataSourceMap.put("slaveDataSource2", slaveDataSource2);
        assertThat(((MasterSlaveDataSource) MasterSlaveDataSourceFactory.createDataSource(dataSourceMap, 
                new MasterSlaveRuleConfiguration("ds", "masterDataSource", Arrays.asList("slaveDataSource1", "slaveDataSource2"), new LoadBalanceStrategyConfiguration("ROUND_ROBIN")),
                new Properties())).getDatabaseType(), instanceOf(H2DatabaseType.class));
        verify(slaveConnection1).close();
        verify(slaveConnection2).close();
    }

    
test_code:
            public void assertGetDatabaseProductName() throws SQLException {
                DataSource masterDataSource = mock(DataSource.class);
                DataSource slaveDataSource1 = mock(DataSource.class);
                DataSource slaveDataSource2 = mock(DataSource.class);
                Connection masterConnection = mockConnection("jdbc:h2:mem:test_ds;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL");
                Connection slaveConnection1 = mockConnection("jdbc:h2:mem:test_ds;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL");
                Connection slaveConnection2 = mockConnection("jdbc:h2:mem:test_ds;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL");
                when(masterDataSource.getConnection()).thenReturn(masterConnection);
                when(slaveDataSource1.getConnection()).thenReturn(slaveConnection1);
                when(slaveDataSource2.getConnection()).thenReturn(slaveConnection2);
                Map<String, DataSource> dataSourceMap = new LinkedHashMap<>(3, 1);
                dataSourceMap.put("masterDataSource", masterDataSource);
                dataSourceMap.put("slaveDataSource1", slaveDataSource1);
                dataSourceMap.put("slaveDataSource2", slaveDataSource2);
                assertThat(((MasterSlaveDataSource) MasterSlaveDataSourceFactory.createDataSource(dataSourceMap, 
                        new MasterSlaveRuleConfiguration("ds", "masterDataSource", Arrays.asList("slaveDataSource1", "slaveDataSource2"), new LoadBalanceStrategyConfiguration("ROUND_ROBIN")),
                        new Properties())).getDatabaseType(), instanceOf(H2DatabaseType.class));
                verify(slaveConnection1, times(1)).close();
                verify(slaveConnection2, times(1)).close();
            }

import:
['import org.mockito.Mockito;', 'import java.util.*;', 'import static org.mockito.Mockito.*;', 'import static org.hamcrest.CoreMatchers.*;', 'import static org.junit.Assert.*;', 'import org.apache.shardingsphere.shardingjdbc.jdbc.core.datasource.MasterSlaveDataSource;', 'import org.apache.shardingsphere.shardingjdbc.jdbc.core.context.MasterSlaveRuntimeContext;']
pom:
None