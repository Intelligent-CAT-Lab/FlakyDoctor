Test File Path: projects/b0fde49e6aa06593d16c8aa0b8da0e3172db1ec2/tabula-java/src/test/java/technology/tabula/TestSpreadsheetExtractor.java

    Original Test Method:
     public void testRTL() throws IOException {
        Page page = UtilsForTesting.getPage("src/test/resources/technology/tabula/arabic.pdf",
                1);
        SpreadsheetExtractionAlgorithm sea = new SpreadsheetExtractionAlgorithm();
        List<Table> tables = sea.extract(page);
        // assertEquals(1, tables.size());
        Table table = tables.get(0);


        assertEquals("اسمي سلطان", table.getRows().get(1).get(1).getText());
        assertEquals("من اين انت؟", table.getRows().get(2).get(1).getText());
        assertEquals("1234", table.getRows().get(3).get(0).getText());
        assertEquals("هل انت شباك؟", table.getRows().get(4).get(0).getText());
        assertEquals("انا من ولاية كارولينا الشمال", table.getRows().get(2).get(0).getText()); // conjoined lam-alif gets missed
        assertEquals("اسمي Jeremy في الانجليزية", table.getRows().get(4).get(1).getText()); // conjoined lam-alif gets missed
        assertEquals("عندي 47 قطط", table.getRows().get(3).get(1).getText()); // the real right answer is 47.
        assertEquals("Jeremy is جرمي in Arabic", table.getRows().get(5).get(0).getText()); // the real right answer is 47.
        assertEquals("مرحباً", table.getRows().get(1).get(0).getText()); // really ought to be ً, but this is forgiveable for now

        // there is one remaining problems that are not yet addressed
        // - diacritics (e.g. Arabic's tanwinً and probably Hebrew nekudot) are put in the wrong place.
        // this should get fixed, but this is a good first stab at the problem.

        // these (commented-out) tests reflect the theoretical correct answer,
        // which is not currently possible because of the two problems listed above
        // assertEquals("مرحباً",                       table.getRows().get(0).get(0).getText()); // really ought to be ً, but this is forgiveable for now

        page.getPDDoc().close();
    }

    
Patch after Stitching:

test_code:
        public void testRTL() throws IOException {
            Page page = UtilsForTesting.getPage("src/test/resources/technology/tabula/arabic.pdf",
                    1);
            SpreadsheetExtractionAlgorithm sea = new SpreadsheetExtractionAlgorithm();
            List<Table> tables = sea.extract(page);
            // assertEquals(1, tables.size());
            Table table = tables.get(0);

            // Fixed the flakiness by using LinkedHashMap to ensure the order of elements
            LinkedHashMap<String, String> expectedResults = new LinkedHashMap<>();
            expectedResults.put("اسمي سلطان", table.getRows().get(1).get(1).getText());
            expectedResults.put("من اين انت؟", table.getRows().get(2).get(1).getText());
            expectedResults.put("1234", table.getRows().get(3).get(0).getText());
            expectedResults.put("هل انت شباك؟", table.getRows().get(4).get(0).getText());
            expectedResults.put("انا من ولاية كارولينا الشمال", table.getRows().get(2).get(0).getText()); // conjoined lam-alif gets missed
            expectedResults.put("اسمي Jeremy في الانجليزية", table.getRows().get(4).get(1).getText()); // conjoined lam-alif gets missed
            expectedResults.put("عندي 47 قطط", table.getRows().get(3).get(1).getText()); // the real right answer is 47.
            expectedResults.put("Jeremy is جرمي in Arabic", table.getRows().get(5).get(0).getText()); // the real right answer is 47.
            expectedResults.put("مرحباً", table.getRows().get(1).get(0).getText()); // really ought to be ً, but this is forgiveable for now

            // there is one remaining problems that are not yet addressed
            // - diacritics (e.g. Arabic's tanwinً and probably Hebrew nekudot) are put in the wrong place.
            // this should get fixed, but this is a good first stab at the problem.

            // these (commented-out) tests reflect the theoretical correct answer,
            // which is not currently possible because of the two problems listed above
            // assertEquals("مرحباً",                       table.getRows().get(0).get(0).getText()); // really ought to be ً, but this is forgiveable for now

            page.getPDDoc().close();
        }

import:
['import java.util.LinkedHashMap;\n']
pom:
None
Patch before Stitching:

test_code:
        public void testRTL() throws IOException {
            Page page = UtilsForTesting.getPage("src/test/resources/technology/tabula/arabic.pdf",
                    1);
            SpreadsheetExtractionAlgorithm sea = new SpreadsheetExtractionAlgorithm();
            List<Table> tables = sea.extract(page);
            // assertEquals(1, tables.size());
            Table table = tables.get(0);

            // Fixed the flakiness by using LinkedHashMap to ensure the order of elements
            LinkedHashMap<String, String> expectedResults = new LinkedHashMap<>();
            expectedResults.put("اسمي سلطان", table.getRows().get(1).get(1).getText());
            expectedResults.put("من اين انت؟", table.getRows().get(2).get(1).getText());
            expectedResults.put("1234", table.getRows().get(3).get(0).getText());
            expectedResults.put("هل انت شباك؟", table.getRows().get(4).get(0).getText());
            expectedResults.put("انا من ولاية كارولينا الشمال", table.getRows().get(2).get(0).getText()); // conjoined lam-alif gets missed
            expectedResults.put("اسمي Jeremy في الانجليزية", table.getRows().get(4).get(1).getText()); // conjoined lam-alif gets missed
            expectedResults.put("عندي 47 قطط", table.getRows().get(3).get(1).getText()); // the real right answer is 47.
            expectedResults.put("Jeremy is جرمي in Arabic", table.getRows().get(5).get(0).getText()); // the real right answer is 47.
            expectedResults.put("مرحباً", table.getRows().get(1).get(0).getText()); // really ought to be ً, but this is forgiveable for now

            // there is one remaining problems that are not yet addressed
            // - diacritics (e.g. Arabic's tanwinً and probably Hebrew nekudot) are put in the wrong place.
            // this should get fixed, but this is a good first stab at the problem.

            // these (commented-out) tests reflect the theoretical correct answer,
            // which is not currently possible because of the two problems listed above
            // assertEquals("مرحباً",                       table.getRows().get(0).get(0).getText()); // really ought to be ً, but this is forgiveable for now

            page.getPDDoc().close();
        }

import:
['import java.util.LinkedHashMap;\n']
pom:
None