test_before_fix:
    public void handlesMethodNotAllowedWithHeaders() {
        final Throwable thrown = catchThrowable(() -> target("/exception/json-mapping-exception")
            .request(MediaType.APPLICATION_JSON)
            .post(Entity.json("A"), String.class));
        assertThat(thrown).isInstanceOf(WebApplicationException.class);
        final Response resp = ((WebApplicationException) thrown).getResponse();
        assertThat(resp.getStatus()).isEqualTo(405);
        assertThat(resp.getHeaders()).contains(entry("Allow", Collections.singletonList("GET,OPTIONS")));
        assertThat(resp.readEntity(String.class)).isEqualTo("{\"code\":405,\"message\":\"HTTP 405 Method Not Allowed\"}");
    }

test_after_fix:

code:
 
  
 public void handlesMethodNotAllowedWithHeaders() { 
     final Throwable thrown = Assertions.catchThrowable(() -> target("/exception/json-mapping-exception") 
             .request(MediaType.APPLICATION_JSON) 
             .post(Entity.json("A"), String.class)); 
     Assertions.assertThat(thrown).isInstanceOf(WebApplicationException.class); 
     final Response resp = ((WebApplicationException) thrown).getResponse(); 
     Assertions.assertThat(resp.getStatus()).isEqualTo(405); 
     List<Object> allowHeaders = resp.getHeaders().get("Allow"); 
     if (allowHeaders != null) { 
         List<String> allowHeadersStr = allowHeaders.stream().flatMap(header -> Arrays.stream(header.toString().split(","))).sorted().collect(Collectors.toList()); 
         Assertions.assertThat(allowHeadersStr).isEqualTo(Arrays.asList("GET", "OPTIONS")); 
     } 
     Assertions.assertThat(resp.readEntity(String.class)).isEqualTo("{\"code\":405,\"message\":\"HTTP 405 Method Not Allowed\"}"); 
 } 
  
  
 
import:
[]
pom:
