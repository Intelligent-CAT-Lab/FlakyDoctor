test_before_fix:
    public void testBadRequest() {

        // implicit content-type (= "application/json")

        String body = "whatever";

        Operation op = Operation
                .createPost(UriUtils.buildUri(host.getUri(), LongURIGetService.SELF_LINK))
                .setBody(body);

        FailureResponse failure = sender.sendAndWaitFailure(op);

        assertNotNull(failure.failure);
        assertEquals(Operation.MEDIA_TYPE_APPLICATION_JSON, failure.op.getContentType());
        assertEquals(Operation.STATUS_CODE_BAD_REQUEST, failure.op.getStatusCode());

        // explicit content-type

        op = Operation
                .createPost(UriUtils.buildUri(host.getUri(), LongURIGetService.SELF_LINK))
                .setContentType("application/html")
                .setBody(body);

        failure = sender.sendAndWaitFailure(op);

        assertNotNull(failure.failure);
        assertNotNull(failure.op.getBody(String.class));
        assertEquals(Operation.STATUS_CODE_BAD_REQUEST, failure.op.getStatusCode());

        // invalid target URI and content type

        LongURIRequest request = new LongURIRequest();
        request.uri = "<script>alert(\"surprise!\");</script>";

        op = Operation
                .createPost(UriUtils.buildUri(host.getUri(), LongURIGetService.SELF_LINK))
                .setContentType("application/html")
                .setBody(request);

        failure = sender.sendAndWaitFailure(op);

        assertNotNull(failure.failure);
        assertEquals(Operation.MEDIA_TYPE_APPLICATION_JSON, failure.op.getContentType());
        assertEquals(Operation.STATUS_CODE_NOT_FOUND, failure.op.getStatusCode());
        assertTrue(failure.op.getBody(String.class)
                .startsWith("{\"message\":\"Service not found:"));
    }

test_after_fix:

code:
public void testBadRequest() { 
  
     // implicit content-type (= "application/json") 
  
     String body = "whatever"; 
  
     Operation op = Operation 
             .createPost(UriUtils.buildUri(host.getUri(), LongURIGetService.SELF_LINK)) 
             .setBody(body); 
  
     FailureResponse failure = sender.sendAndWaitFailure(op); 
  
     assertNotNull(failure.failure); 
     assertEquals(Operation.MEDIA_TYPE_APPLICATION_JSON, failure.op.getContentType()); 
     assertEquals(Operation.STATUS_CODE_BAD_REQUEST, failure.op.getStatusCode()); 
  
     // explicit content-type 
  
     op = Operation 
             .createPost(UriUtils.buildUri(host.getUri(), LongURIGetService.SELF_LINK)) 
             .setContentType("application/html") 
             .setBody(body); 
  
     failure = sender.sendAndWaitFailure(op); 
  
     assertNotNull(failure.failure); 
     assertNotNull(failure.op.getBody(String.class)); 
     assertEquals(Operation.STATUS_CODE_BAD_REQUEST, failure.op.getStatusCode()); 
  
     // invalid target URI and content type 
  
     LongURIRequest request = new LongURIRequest(); 
     request.uri = "<script>alert(\"surprise!\");</script>"; 
  
     op = Operation 
             .createPost(UriUtils.buildUri(host.getUri(), LongURIGetService.SELF_LINK)) 
             .setContentType("application/html") 
             .setBody(request); 
  
     failure = sender.sendAndWaitFailure(op); 
  
     assertNotNull(failure.failure); 
     assertEquals(Operation.MEDIA_TYPE_APPLICATION_JSON, failure.op.getContentType()); 
     assertEquals(Operation.STATUS_CODE_NOT_FOUND, failure.op.getStatusCode()); 
  
     JsonParser parser = new JsonParser(); 
     String bodyAsString = failure.op.getBody(String.class); 
     String parsedBodyAsString = parser.parse(bodyAsString).getAsJsonObject().get("message").getAsString(); 
     assertTrue(parsedBodyAsString.startsWith("Service not found:")); 
 } 
 
import:
['import com.google.gson.JsonParser;\n ']
pom:

<dependency>
    <groupId>com.google.code.gson</groupId>
    <artifactId>gson</artifactId>
    <version>2.8.6</version>
</dependency>
