test_before_fix:
    public void testSinglePropertyDependency() throws Exception {
        JsonSchemaGenerator generator = new JsonSchemaGenerator(MAPPER);
        JsonSchema jsonSchema = generator.generateSchema(SimpleBean.class);
        ((ObjectSchema) jsonSchema).addSimpleDependency("property1", "property2");

        Map<String, Object> result = writeAndMap(MAPPER, jsonSchema);
        assertNotNull(result);

        String schemaString = MAPPER.writeValueAsString(jsonSchema);
        assertEquals("{\"type\":\"object\"," +
                "\"id\":\"urn:jsonschema:com:fasterxml:jackson:module:jsonSchema:TestGenerateJsonSchema:SimpleBean\"," +
                "\"dependencies\":{\"property1\":[\"property2\"]}," +
                "\"properties\":{\"property1\":{\"type\":\"integer\"}" +
                ",\"property2\":{\"type\":\"string\"}," +
                "\"property3\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}," +
                "\"property4\":{\"type\":\"array\",\"items\":{\"type\":\"number\"}}," +
                "\"property5\":{\"type\":\"string\",\"required\":true}}}", schemaString);
    }

test_after_fix:

code:
public void testSinglePropertyDependency() throws Exception { 
     JsonSchemaGenerator generator = new JsonSchemaGenerator(MAPPER); 
     JsonSchema jsonSchema = generator.generateSchema(SimpleBean.class); 
     ((ObjectSchema) jsonSchema).addSimpleDependency("property1", "property2"); 
  
     Map<String, Object> result = writeAndMap(MAPPER, jsonSchema); 
     assertNotNull(result); 
  
     String schemaString = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(jsonSchema); 
  
     JsonNode expected = MAPPER.readTree("{\"type\":\"object\"," + 
             "\"id\":\"urn:jsonschema:com:fasterxml:jackson:module:jsonSchema:TestGenerateJsonSchema:SimpleBean\"," + 
             "\"dependencies\":{\"property1\":[\"property2\"]}," + 
             "\"properties\":{\"property1\":{\"type\":\"integer\"}" + 
             ",\"property2\":{\"type\":\"string\"}," + 
             "\"property3\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}," + 
             "\"property4\":{\"type\":\"array\",\"items\":{\"type\":\"number\"}}," + 
             "\"property5\":{\"type\":\"string\",\"required\":true}}}"); 
  
     JsonNode actual = MAPPER.readTree(schemaString); 
  
     assertEquals(expected, actual); 
 } 
 
import:
['import com.fasterxml.jackson.databind.JsonNode;\n ']
pom:

<!-- No changes needed -->
