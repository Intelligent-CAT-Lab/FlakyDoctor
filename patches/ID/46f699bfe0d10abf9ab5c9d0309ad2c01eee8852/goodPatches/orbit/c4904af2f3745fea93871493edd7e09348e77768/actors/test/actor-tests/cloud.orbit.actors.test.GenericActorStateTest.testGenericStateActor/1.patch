test_before_fix:
    public void testGenericStateActor() throws ExecutionException, InterruptedException
    {
        Stage stage1 = createStage();
        assertEquals(0, fakeDatabase.values().size());
        final Point p1 = new Point();
        p1.x = 1;
        p1.y = 2;
        Actor.getReference(GenActor.class, "300").setPoint(p1).join();

        stage1.stop().join();

        Stage stage2 = createStage();
        Point p2 = Actor.getReference(GenActor.class, "300").getPoint().join();
        assertEquals(1, p2.x);
        assertEquals(2, p2.y);

        assertEquals("{\"data\":{\"x\":1,\"y\":2}}", fakeDatabase.values().stream().findFirst().get().toString());

    }

test_after_fix:

code:
void testGenericStateActor() throws ExecutionException, InterruptedException 
 { 
     Stage stage1 = createStage(); 
     assertEquals(0, fakeDatabase.values().size()); 
     final Point p1 = new Point(); 
     p1.x = 1; 
     p1.y = 2; 
     Actor.getReference(GenActor.class, "300").setPoint(p1).join(); 
  
     stage1.stop().join(); 
  
     Stage stage2 = createStage(); 
     Point p2 = Actor.getReference(GenActor.class, "300").getPoint().join(); 
     assertEquals(1, p2.x); 
     assertEquals(2, p2.y); 
  
     String jsonString = fakeDatabase.values().stream().findFirst().get().toString(); 
     JsonParser parser = new JsonParser(); 
     JsonObject jsonObject = parser.parse(jsonString).getAsJsonObject(); 
     JsonObject dataObject = jsonObject.getAsJsonObject("data"); 
     assertEquals(1, dataObject.get("x").getAsInt()); 
     assertEquals(2, dataObject.get("y").getAsInt()); 
 } 
 
import:
['import com.google.gson.JsonObject;\n ', 'import com.google.gson.JsonParser;\n ']
pom:

<dependency>
    <groupId>com.google.code.gson</groupId>
    <artifactId>gson</artifactId>
    <version>2.8.6</version>
</dependency>
