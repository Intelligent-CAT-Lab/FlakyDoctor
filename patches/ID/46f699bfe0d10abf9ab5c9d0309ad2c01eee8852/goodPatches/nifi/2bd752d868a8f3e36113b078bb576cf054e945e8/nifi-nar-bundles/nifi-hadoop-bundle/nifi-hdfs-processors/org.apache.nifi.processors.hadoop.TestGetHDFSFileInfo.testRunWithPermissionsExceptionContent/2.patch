test_before_fix:
    public void testRunWithPermissionsExceptionContent() throws Exception {

        setFileSystemBasicTree(proc.fileSystem);
        proc.fileSystem.addFileStatus(proc.fileSystem.newDir("/some/home/mydir/dir1"), proc.fileSystem.newDir("/some/home/mydir/dir1/list_exception_java.io.InterruptedIOException"));

        runner.setIncomingConnection(false);
        runner.setProperty(GetHDFSFileInfo.FULL_PATH, "/some/home/mydir");
        runner.setProperty(GetHDFSFileInfo.RECURSE_SUBDIRS, "true");
        runner.setProperty(GetHDFSFileInfo.IGNORE_DOTTED_DIRS, "true");
        runner.setProperty(GetHDFSFileInfo.IGNORE_DOTTED_FILES, "true");
        runner.setProperty(GetHDFSFileInfo.DESTINATION, GetHDFSFileInfo.DESTINATION_CONTENT);
        runner.setProperty(GetHDFSFileInfo.GROUPING, GetHDFSFileInfo.GROUP_ALL);

        runner.run();

        runner.assertTransferCount(GetHDFSFileInfo.REL_ORIGINAL, 0);
        runner.assertTransferCount(GetHDFSFileInfo.REL_SUCCESS, 1);
        runner.assertTransferCount(GetHDFSFileInfo.REL_FAILURE, 0);
        runner.assertTransferCount(GetHDFSFileInfo.REL_NOT_FOUND, 0);

        final MockFlowFile mff = runner.getFlowFilesForRelationship(GetHDFSFileInfo.REL_SUCCESS).get(0);
        mff.assertContentEquals(Paths.get("src/test/resources/TestGetHDFSFileInfo/testRunWithPermissionsExceptionContent.json"));
    }

test_after_fix:

code:
public void testRunWithPermissionsExceptionContent() throws Exception {  
  
     setFileSystemBasicTree(proc.fileSystem);  
     proc.fileSystem.addFileStatus(proc.fileSystem.newDir("/some/home/mydir/dir1"), proc.fileSystem.newDir("/some/home/mydir/dir1/list_exception_java.io.InterruptedIOException"));  
  
     runner.setIncomingConnection(false);  
     runner.setProperty(GetHDFSFileInfo.FULL_PATH, "/some/home/mydir");  
     runner.setProperty(GetHDFSFileInfo.RECURSE_SUBDIRS, "true");  
     runner.setProperty(GetHDFSFileInfo.IGNORE_DOTTED_DIRS, "true");  
     runner.setProperty(GetHDFSFileInfo.IGNORE_DOTTED_FILES, "true");  
     runner.setProperty(GetHDFSFileInfo.DESTINATION, GetHDFSFileInfo.DESTINATION_CONTENT);  
     runner.setProperty(GetHDFSFileInfo.GROUPING, GetHDFSFileInfo.GROUP_ALL);  
  
     runner.run();  
  
     runner.assertTransferCount(GetHDFSFileInfo.REL_ORIGINAL, 0);  
     runner.assertTransferCount(GetHDFSFileInfo.REL_SUCCESS, 1);  
     runner.assertTransferCount(GetHDFSFileInfo.REL_FAILURE, 0);  
     runner.assertTransferCount(GetHDFSFileInfo.REL_NOT_FOUND, 0);  
  
     final MockFlowFile mff = runner.getFlowFilesForRelationship(GetHDFSFileInfo.REL_SUCCESS).get(0);  
  
     ObjectMapper mapper = new ObjectMapper();  
     String actualContent = new String(mff.toByteArray());  
     String expectedContent = new String(Files.readAllBytes(Paths.get("src/test/resources/TestGetHDFSFileInfo/testRunWithPermissionsExceptionContent.json")));  
  
     List<Object> actualList = mapper.readValue(actualContent, new TypeReference<List<Object>>(){});  
     List<Object> expectedList = mapper.readValue(expectedContent, new TypeReference<List<Object>>(){});  
  
     actualList.sort(Comparator.comparing(Object::toString)); 
     expectedList.sort(Comparator.comparing(Object::toString)); 
  
     assertEquals(expectedList, actualList);  
 } 
 
import:
['import java.util.ArrayList;\n ', 'import java.util.Comparator;\n ', 'import java.util.Comparator;\n ']
pom:
