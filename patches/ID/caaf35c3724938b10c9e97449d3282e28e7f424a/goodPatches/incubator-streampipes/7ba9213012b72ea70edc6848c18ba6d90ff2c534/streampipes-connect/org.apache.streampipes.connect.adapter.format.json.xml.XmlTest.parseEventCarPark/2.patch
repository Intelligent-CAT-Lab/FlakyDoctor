test_before_fix:
    public void parseEventCarPark() throws AdapterException {

        String jo = getCarParkExample();

        XmlParser parser = new XmlParser("parkhaus");

        List<byte[]> parsedEvent = parser.parseNEvents(getInputStream(jo), 1);

        assertEquals(6, parsedEvent.size());
        String parsedStringEvent = new String(parsedEvent.get(0), StandardCharsets.UTF_8);

        assertEquals("{\"frei\":0,\"tendenz\":3,\"bezeichnung\":\"bahnhof.txt\",\"zeitstempel\":\"25.07.2018 10:45\",\"gesamt\":114,\"lfdnr\":1,\"status\":1}", parsedStringEvent);
    }

test_after_fix:

code:
 
  
 public void parseEventCarPark() throws AdapterException { 
     String jo = getCarParkExample(); 
     XmlParser parser = new XmlParser("parkhaus"); 
     List<byte[]> parsedEvent = parser.parseNEvents(getInputStream(jo), 1); 
     assertEquals(6, parsedEvent.size()); 
     String parsedStringEvent = new String(parsedEvent.get(0), StandardCharsets.UTF_8); 
     ObjectMapper mapper = new ObjectMapper(); 
     try { 
         JsonNode actualObj = mapper.readTree(parsedStringEvent); 
         JsonNode expectedObj = mapper.readTree("{\"frei\":0,\"tendenz\":3,\"bezeichnung\":\"bahnhof.txt\",\"zeitstempel\":\"25.07.2018 10:45\",\"gesamt\":114,\"lfdnr\":1,\"status\":1}"); 
         assertEquals(expectedObj, actualObj); 
     } catch (IOException e) { 
         e.printStackTrace(); 
     } 
 } 
  
  
 
import:
[]
pom:
