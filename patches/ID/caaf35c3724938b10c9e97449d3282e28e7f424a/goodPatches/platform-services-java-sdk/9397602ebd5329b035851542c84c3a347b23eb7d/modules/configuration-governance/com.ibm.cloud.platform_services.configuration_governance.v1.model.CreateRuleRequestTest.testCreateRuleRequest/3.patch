test_before_fix:
  public void testCreateRuleRequest() throws Throwable {
    RuleTargetAttribute ruleTargetAttributeModel = new RuleTargetAttribute.Builder()
      .name("resource_id")
      .operator("string_equals")
      .value("f0f8f7994e754ff38f9d370201966561")
      .build();
    assertEquals(ruleTargetAttributeModel.name(), "resource_id");
    assertEquals(ruleTargetAttributeModel.operator(), "string_equals");
    assertEquals(ruleTargetAttributeModel.value(), "f0f8f7994e754ff38f9d370201966561");

    TargetResource targetResourceModel = new TargetResource.Builder()
      .serviceName("iam-groups")
      .resourceKind("zone")
      .additionalTargetAttributes(new java.util.ArrayList<RuleTargetAttribute>(java.util.Arrays.asList(ruleTargetAttributeModel)))
      .build();
    assertEquals(targetResourceModel.serviceName(), "iam-groups");
    assertEquals(targetResourceModel.resourceKind(), "zone");
    assertEquals(targetResourceModel.additionalTargetAttributes(), new java.util.ArrayList<RuleTargetAttribute>(java.util.Arrays.asList(ruleTargetAttributeModel)));

    RuleRequiredConfigSingleProperty ruleRequiredConfigModel = new RuleRequiredConfigSingleProperty.Builder()
      .description("testString")
      .property("public_access_enabled")
      .operator("is_true")
      .value("testString")
      .build();
    assertEquals(ruleRequiredConfigModel.description(), "testString");
    assertEquals(ruleRequiredConfigModel.property(), "public_access_enabled");
    assertEquals(ruleRequiredConfigModel.operator(), "is_true");
    assertEquals(ruleRequiredConfigModel.value(), "testString");

    EnforcementAction enforcementActionModel = new EnforcementAction.Builder()
      .action("disallow")
      .build();
    assertEquals(enforcementActionModel.action(), "disallow");

    RuleRequest ruleRequestModel = new RuleRequest.Builder()
      .accountId("testString")
      .name("testString")
      .description("testString")
      .ruleType("user_defined")
      .target(targetResourceModel)
      .requiredConfig(ruleRequiredConfigModel)
      .enforcementActions(new java.util.ArrayList<EnforcementAction>(java.util.Arrays.asList(enforcementActionModel)))
      .labels(new java.util.ArrayList<String>(java.util.Arrays.asList("testString")))
      .build();
    assertEquals(ruleRequestModel.accountId(), "testString");
    assertEquals(ruleRequestModel.name(), "testString");
    assertEquals(ruleRequestModel.description(), "testString");
    assertEquals(ruleRequestModel.ruleType(), "user_defined");
    assertEquals(ruleRequestModel.target(), targetResourceModel);
    assertEquals(ruleRequestModel.requiredConfig(), ruleRequiredConfigModel);
    assertEquals(ruleRequestModel.enforcementActions(), new java.util.ArrayList<EnforcementAction>(java.util.Arrays.asList(enforcementActionModel)));
    assertEquals(ruleRequestModel.labels(), new java.util.ArrayList<String>(java.util.Arrays.asList("testString")));

    CreateRuleRequest createRuleRequestModel = new CreateRuleRequest.Builder()
      .requestId("3cebc877-58e7-44a5-a292-32114fa73558")
      .rule(ruleRequestModel)
      .build();
    assertEquals(createRuleRequestModel.requestId(), "3cebc877-58e7-44a5-a292-32114fa73558");
    assertEquals(createRuleRequestModel.rule(), ruleRequestModel);

    String json = TestUtilities.serialize(createRuleRequestModel);

    CreateRuleRequest createRuleRequestModelNew = TestUtilities.deserialize(json, CreateRuleRequest.class);
    assertTrue(createRuleRequestModelNew instanceof CreateRuleRequest);
    assertEquals(createRuleRequestModelNew.requestId(), "3cebc877-58e7-44a5-a292-32114fa73558");
    assertEquals(createRuleRequestModelNew.rule().toString(), ruleRequestModel.toString());
  }

test_after_fix:

code:
public void testCreateRuleRequest() throws Throwable {   
       RuleTargetAttribute ruleTargetAttributeModel = new RuleTargetAttribute.Builder()   
         .name("resource_id")   
         .operator("string_equals")   
         .value("f0f8f7994e754ff38f9d370201966561")   
         .build();   
       assertEquals(ruleTargetAttributeModel.name(), "resource_id");   
       assertEquals(ruleTargetAttributeModel.operator(), "string_equals");   
       assertEquals(ruleTargetAttributeModel.value(), "f0f8f7994e754ff38f9d370201966561");   
      
       TargetResource targetResourceModel = new TargetResource.Builder()   
         .serviceName("iam-groups")   
         .resourceKind("zone")   
         .additionalTargetAttributes(new java.util.ArrayList<RuleTargetAttribute>(java.util.Arrays.asList(ruleTargetAttributeModel)))   
         .build();   
       assertEquals(targetResourceModel.serviceName(), "iam-groups");   
       assertEquals(targetResourceModel.resourceKind(), "zone");   
       assertEquals(targetResourceModel.additionalTargetAttributes(), new java.util.ArrayList<RuleTargetAttribute>(java.util.Arrays.asList(ruleTargetAttributeModel)));   
      
       RuleRequiredConfigSingleProperty ruleRequiredConfigModel = new RuleRequiredConfigSingleProperty.Builder()   
         .description("testString")   
         .property("public_access_enabled")   
         .operator("is_true")   
         .value("testString")   
         .build();   
       assertEquals(ruleRequiredConfigModel.description(), "testString");   
       assertEquals(ruleRequiredConfigModel.property(), "public_access_enabled");   
       assertEquals(ruleRequiredConfigModel.operator(), "is_true");   
       assertEquals(ruleRequiredConfigModel.value(), "testString");   
      
       EnforcementAction enforcementActionModel = new EnforcementAction.Builder()   
         .action("disallow")   
         .build();   
       assertEquals(enforcementActionModel.action(), "disallow");   
      
       RuleRequest ruleRequestModel = new RuleRequest.Builder()   
         .accountId("testString")   
         .name("testString")   
         .description("testString")   
         .ruleType("user_defined")   
         .target(targetResourceModel)   
         .requiredConfig(ruleRequiredConfigModel)   
         .enforcementActions(new java.util.ArrayList<EnforcementAction>(java.util.Arrays.asList(enforcementActionModel)))   
         .labels(new java.util.ArrayList<String>(java.util.Arrays.asList("testString")))   
         .build();   
       assertEquals(ruleRequestModel.accountId(), "testString");   
       assertEquals(ruleRequestModel.name(), "testString");   
       assertEquals(ruleRequestModel.description(), "testString");   
       assertEquals(ruleRequestModel.ruleType(), "user_defined");   
       assertEquals(ruleRequestModel.target(), targetResourceModel);   
       assertEquals(ruleRequestModel.requiredConfig(), ruleRequiredConfigModel);   
       assertEquals(ruleRequestModel.enforcementActions(), new java.util.ArrayList<EnforcementAction>(java.util.Arrays.asList(enforcementActionModel)));   
       assertEquals(ruleRequestModel.labels(), new java.util.ArrayList<String>(java.util.Arrays.asList("testString")));   
      
       CreateRuleRequest createRuleRequestModel = new CreateRuleRequest.Builder()   
         .requestId("3cebc877-58e7-44a5-a292-32114fa73558")   
         .rule(ruleRequestModel)   
         .build();   
       assertEquals(createRuleRequestModel.requestId(), "3cebc877-58e7-44a5-a292-32114fa73558");   
       assertEquals(createRuleRequestModel.rule(), ruleRequestModel);   
      
       String json = new Gson().toJson(createRuleRequestModel);   
      
       Gson gson = new GsonBuilder().setPrettyPrinting().create();   
       JsonParser parser = new JsonParser(); 
       JsonElement expectedJson = parser.parse(gson.toJson(createRuleRequestModel));   
       JsonElement actualJson = parser.parse(gson.toJson(new Gson().fromJson(json, CreateRuleRequest.class)));   
      
       assertEquals(expectedJson, actualJson);   
   } 
 
import:
['import com.google.gson.JsonElement;\n ', 'import com.google.gson.JsonParser;\n ']
pom:
