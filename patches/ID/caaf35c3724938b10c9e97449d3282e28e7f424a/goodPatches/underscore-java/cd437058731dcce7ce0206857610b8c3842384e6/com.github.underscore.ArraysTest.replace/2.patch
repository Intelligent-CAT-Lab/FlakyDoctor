test_before_fix:
    public void replace() {
        assertEquals("[100, 1, 100, 3, 100, 5]", U.replace(U.range(6),
                arg -> arg % 2 == 0, 100).toString());
        assertEquals("[0, 1, 2, 3, 4]", U.replace(U.range(5), null, 100).toString());
        assertEquals("[a, aa, b, b]", new U<>(asList("a", "aa", "aaa", "aaaa")).replace(
                arg -> arg.length() > 2, "b").toString());
        assertEquals("[a, aa, cc, ccc]", new U<>(asList("a", "aa", "cc", "ccc")).replace(
               null, "b").toString());
        Set<Integer> set = new HashSet<>();
        set.addAll(U.range(7));
        assertEquals("[0, 1, 2, 100, 100, 100, 100]", U.chain(set).replace(
                arg -> arg > 2, 100).toString());
    }

test_after_fix:

code:
public void replace() { 
     assertEquals("[100, 1, 100, 3, 100, 5]", U.replace(U.range(6),  
             arg -> arg % 2 == 0, 100).toString());  
     assertEquals("[0, 1, 2, 3, 4]", U.replace(U.range(5), null, 100).toString());  
     assertEquals("[a, aa, b, b]", new U<>(asList("a", "aa", "aaa", "aaaa")).replace(  
             arg -> arg.length() > 2, "b").toString());  
     assertEquals("[a, aa, cc, ccc]", new U<>(asList("a", "aa", "cc", "ccc")).replace(  
            null, "b").toString());  
     Set<Integer> set = new LinkedHashSet<>();  
     set.addAll(U.range(7));  
     assertEquals("[0, 1, 2, 100, 100, 100, 100]", U.chain(set).replace(  
             arg -> arg > 2, 100).toString());  
 } 
 
import:
['import java.util.LinkedHashSet;\n ', 'import java.util.LinkedHashSet;\n ']
pom:
