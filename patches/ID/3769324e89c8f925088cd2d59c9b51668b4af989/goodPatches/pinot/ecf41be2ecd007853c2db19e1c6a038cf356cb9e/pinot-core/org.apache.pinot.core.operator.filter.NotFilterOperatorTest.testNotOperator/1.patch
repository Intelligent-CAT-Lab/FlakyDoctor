test_before_fix:
  public void testNotOperator() {
    int[] docIds1 = new int[]{2, 3, 10, 15, 16, 17, 18, 21, 22, 23, 24, 26, 28};
    Set<Integer> expectedResult = new HashSet();
    expectedResult.addAll(Arrays.asList(0, 1, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 19, 20, 25, 27, 29));
    Iterator<Integer> expectedIterator = expectedResult.iterator();
    NotFilterOperator notFilterOperator = new NotFilterOperator(new TestFilterOperator(docIds1), 30);
    BlockDocIdIterator iterator = notFilterOperator.nextBlock().getBlockDocIdSet().iterator();
    int docId;
    while ((docId = iterator.next()) != Constants.EOF) {
      Assert.assertEquals(docId, expectedIterator.next().intValue());
    }
  }

test_after_fix:

code:
 
  
 public void testNotOperator() { 
     int[] docIds1 = new int[]{2, 3, 10, 15, 16, 17, 18, 21, 22, 23, 24, 26, 28}; 
     Set<Integer> expectedResult = new LinkedHashSet(); 
     expectedResult.addAll(Arrays.asList(0, 1, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 19, 20, 25, 27, 29)); 
     Iterator<Integer> expectedIterator = expectedResult.iterator(); 
     NotFilterOperator notFilterOperator = new NotFilterOperator(new TestFilterOperator(docIds1), 30); 
     BlockDocIdIterator iterator = notFilterOperator.nextBlock().getBlockDocIdSet().iterator(); 
     int docId; 
     while ((docId = iterator.next()) != Constants.EOF) { 
       Assert.assertEquals(docId, expectedIterator.next().intValue()); 
     } 
 } 
  
  
 
import:
['import java.util.LinkedHashSet;\n ']
pom:
