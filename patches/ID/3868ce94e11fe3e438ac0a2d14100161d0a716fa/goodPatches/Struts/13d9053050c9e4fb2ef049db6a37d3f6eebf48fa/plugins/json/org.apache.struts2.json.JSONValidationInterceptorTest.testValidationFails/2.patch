test_before_fix:
    public void testValidationFails() throws Exception {
        
        action.addActionError("General error");
        
        Map parameters = new HashMap();
        parameters.put("struts.enableJSONValidation", "true");
        request.setParameterMap(parameters);
        
        validationInterceptor.intercept(invocation);
        interceptor.intercept(invocation);

        String json = stringWriter.toString();

        String normalizedActual = TestUtils.normalize(json, true);

        //json
        assertThat(normalizedActual)
                .contains("\"errors\":[\"Generalerror\"]")
                .contains("\"fieldErrors\":{")
                .contains("\"value\":[\"Minvalueis-1\"]")
                .contains("\"text\":[\"Tooshort\",\"Thisisnoemail\"]")
                .contains("\"password\":[\"Passwordisn'tcorrect\"]");

        //execution
        assertFalse(action.isExecuted());
        //http status
        assertEquals(HttpServletResponse.SC_BAD_REQUEST, response.getStatus());
        assertEquals("application/json", response.getContentType());
        assertEquals("UTF-8", response.getCharacterEncoding());
    }

test_after_fix:

code:
public void testValidationFails() throws Exception {  
  
     action.addActionError("General error");  
  
     Map parameters = new LinkedHashMap();  
     parameters.put("struts.enableJSONValidation", "true");  
     request.setParameterMap(parameters);  
  
     validationInterceptor.intercept(invocation);  
     interceptor.intercept(invocation);  
  
     String json = stringWriter.toString();  
  
     String normalizedActual = TestUtils.normalize(json, true);  
  
     //json  
     JsonParser parser = new JsonParser();  
     JsonObject jsonObject = parser.parse(normalizedActual).getAsJsonObject();  
     JsonArray errors = jsonObject.getAsJsonArray("errors");  
     JsonObject fieldErrors = jsonObject.getAsJsonObject("fieldErrors");  
     JsonArray valueErrors = fieldErrors.getAsJsonArray("value");  
     JsonArray textErrors = fieldErrors.getAsJsonArray("text");  
     JsonArray passwordErrors = fieldErrors.getAsJsonArray("password");  
  
     assertTrue(errors.contains(new JsonPrimitive("Generalerror")));  
     assertTrue(valueErrors.contains(new JsonPrimitive("Minvalueis-1")));  
     assertTrue(textErrors.contains(new JsonPrimitive("Tooshort")));  
     assertTrue(textErrors.contains(new JsonPrimitive("Thisisnoemail")));  
     assertTrue(passwordErrors.contains(new JsonPrimitive("Passwordisn'tcorrect")));  
  
     //execution  
     assertFalse(action.isExecuted());  
     //http status  
     assertEquals(HttpServletResponse.SC_BAD_REQUEST, response.getStatus());  
     assertEquals("application/json", response.getContentType());  
     assertEquals("UTF-8", response.getCharacterEncoding());  
 } 
 
import:
[]
pom:
