test_before_fix:
    public void domain() {
        final Domain result = (Domain) map((RpslObject.parse("" +
                "domain:          2.1.2.1.5.5.5.2.0.2.1.e164.arpa\n" +
                "descr:           enum domain\n" +
                "admin-c:         TEST-PN\n" +
                "tech-c:          TEST-PN\n" +
                "zone-c:          TEST-PN\n" +
                "nserver:         ns.1.net\n" +
                "nserver:         ns.foo.net.0.0.193.in-addr.arpa. 10.0.0.0/32\n" +
                "mnt-by:          RIPE-NCC-MNT\n" +
                "ds-rdata:        52314 5 1 93B5837D4E5C063A3728FAA72BA64068F89B39DF\n" +
                "source:          TEST")));

        assertThat(result.getHandle(), is("2.1.2.1.5.5.5.2.0.2.1.e164.arpa"));
        assertThat(result.getLdhName(), is("2.1.2.1.5.5.5.2.0.2.1.e164.arpa"));
        assertThat(result.getUnicodeName(), is(nullValue()));

        assertThat(result.getNameservers(), hasSize(2));
        assertThat(result.getNameservers().get(0).getLdhName(), is("ns.1.net"));
        assertThat(result.getNameservers().get(1).getLdhName(), is("ns.foo.net.0.0.193.in-addr.arpa"));
        assertThat(result.getNameservers().get(1).getIpAddresses().getIpv4().get(0), is("10.0.0.0/32"));

        final Domain.SecureDNS secureDNS = result.getSecureDNS();
        assertThat(secureDNS.isDelegationSigned(), is(true));
        assertThat(secureDNS.getDsData().get(0).getAlgorithm(), is(5));
        assertThat(secureDNS.getDsData().get(0).getKeyTag(), is(52314L));
        assertThat(secureDNS.getDsData().get(0).getDigest(), is("93B5837D4E5C063A3728FAA72BA64068F89B39DF"));
        assertThat(secureDNS.getDsData().get(0).getDigestType(), is(1));

        final List<Entity> entities = result.getEntitySearchResults();
        assertThat(entities, hasSize(2));
        assertThat(entities.get(0).getHandle(), is("RIPE-NCC-MNT"));
        assertThat(entities.get(0).getRoles(), contains(Role.REGISTRANT));
        assertThat(entities.get(0).getVCardArray(), is(nullValue()));
        assertThat(entities.get(1).getHandle(), is("TEST-PN"));
        assertThat(entities.get(1).getRoles(), containsInAnyOrder(Role.ADMINISTRATIVE, Role.TECHNICAL, Role.ZONE));
        assertThat(entities.get(1).getVCardArray(), is(nullValue()));

        assertThat(result.getStatus(), is(emptyIterable()));
        assertThat(result.getPublicIds(), is(nullValue()));

        assertThat(result.getRemarks().get(0).getDescription().get(0), is("enum domain"));
        assertThat(result.getLinks(), hasSize(2));
        assertThat(result.getLinks().get(0).getRel(), is("self"));
        assertThat(result.getLinks().get(1).getRel(), is("copyright"));
        assertThat(result.getPort43(), is("whois.ripe.net"));

        assertThat(result.getEvents(), hasSize(1));
        assertThat(result.getEvents().get(0).getEventActor(), is(nullValue()));
        assertThat(result.getEvents().get(0).getEventAction(), is(Action.LAST_CHANGED));
        assertThat(result.getEvents().get(0).getEventDate(), is(VERSION_TIMESTAMP));
        assertThat(result.getEvents().get(0).getEventActor(), is(nullValue()));

        assertThat(result.getPort43(), is("whois.ripe.net"));
    }

test_after_fix:

code:
public void domain() { 
     final Domain result = (Domain) map((RpslObject.parse("" + 
             "domain:          2.1.2.1.5.5.5.2.0.2.1.e164.arpa\n" + 
             "descr:           enum domain\n" + 
             "admin-c:         TEST-PN\n" + 
             "tech-c:          TEST-PN\n" + 
             "zone-c:          TEST-PN\n" + 
             "nserver:         ns.1.net\n" + 
             "nserver:         ns.foo.net.0.0.193.in-addr.arpa. 10.0.0.0/32\n" + 
             "mnt-by:          RIPE-NCC-MNT\n" + 
             "ds-rdata:        52314 5 1 93B5837D4E5C063A3728FAA72BA64068F89B39DF\n" + 
             "source:          TEST"))); 
  
     assertThat(result.getHandle(), is("2.1.2.1.5.5.5.2.0.2.1.e164.arpa")); 
     assertThat(result.getLdhName(), is("2.1.2.1.5.5.5.2.0.2.1.e164.arpa")); 
     assertThat(result.getUnicodeName(), is(nullValue())); 
  
     assertThat(result.getNameservers(), hasSize(2)); 
     List<Nameserver> sortedNameservers = result.getNameservers().stream() 
             .sorted(Comparator.comparing(Nameserver::getLdhName)) 
             .collect(Collectors.toList()); 
     assertThat(sortedNameservers.get(0).getLdhName(), is("ns.1.net")); 
     assertThat(sortedNameservers.get(1).getLdhName(), is("ns.foo.net.0.0.193.in-addr.arpa")); 
     assertThat(sortedNameservers.get(1).getIpAddresses().getIpv4().get(0), is("10.0.0.0/32")); 
  
     //... rest of the test 
 } 
 
import:
['import java.util.Comparator;\n ', 'import java.util.stream.Collectors;\n ']
pom:

<!-- No changes in pom.xml -->
