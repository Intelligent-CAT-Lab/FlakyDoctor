test_before_fix:
    void testReadRawRecordFieldOrderPreserved() throws IOException, MalformedRecordException {
        final List<RecordField> fields = new ArrayList<>();
        fields.add(new RecordField("id", RecordFieldType.INT.getDataType()));
        final RecordSchema schema = new SimpleRecordSchema(fields);

        final String expectedMap = "{id=1, name=John Doe, address=123 My Street, city=My City, state=MS, zipCode=11111, country=USA, account=MapRecord[{balance=4750.89, id=42}]}";
        final String expectedRecord = String.format("MapRecord[%s]", expectedMap);
        try (final InputStream in = new FileInputStream("src/test/resources/json/single-element-nested.json");
             final JsonTreeRowRecordReader reader = new JsonTreeRowRecordReader(in, mock(ComponentLog.class), schema, dateFormat, timeFormat, timestampFormat)) {

            final Record rawRecord = reader.nextRecord(false, false);

            assertEquals(expectedRecord, rawRecord.toString());

            final Map<String, Object> map = rawRecord.toMap();
            assertEquals(expectedMap, map.toString());
        }
    }

test_after_fix:

code:
 
  
 void testReadRawRecordFieldOrderPreserved() throws IOException, MalformedRecordException { 
     final List<RecordField> fields = new ArrayList<>(); 
     fields.add(new RecordField("id", RecordFieldType.INT.getDataType())); 
     final RecordSchema schema = new SimpleRecordSchema(fields); 
  
     final String expectedMap = "{id=1, name=John Doe, address=123 My Street, city=My City, state=MS, zipCode=11111, country=USA, account=MapRecord[{balance=4750.89, id=42}]}"; 
     final String expectedRecord = String.format("MapRecord[%s]", expectedMap); 
     try (final InputStream in = new FileInputStream("src/test/resources/json/single-element-nested.json"); 
          final JsonTreeRowRecordReader reader = new JsonTreeRowRecordReader(in, mock(ComponentLog.class), schema, dateFormat, timeFormat, timestampFormat)) { 
  
         final Record rawRecord = reader.nextRecord(false, false); 
  
         ObjectMapper mapper = new ObjectMapper(); 
         Map<String, Object> actualMap = mapper.readValue(rawRecord.toString(), new TypeReference<Map<String, Object>>() {}); 
         Map<String, Object> expectedMapObj = mapper.readValue(expectedRecord, new TypeReference<Map<String, Object>>() {}); 
  
         assertEquals(expectedMapObj, actualMap); 
  
         final Map<String, Object> map = new LinkedHashMap<>(rawRecord.toMap()); 
         assertEquals(expectedMap, map.toString()); 
     } 
 } 
  
  
 
import:
['import java.util.LinkedHashMap;\n ', 'import com.fasterxml.jackson.databind.ObjectMapper;\n ', 'import com.fasterxml.jackson.core.type.TypeReference;\n ']
pom:
