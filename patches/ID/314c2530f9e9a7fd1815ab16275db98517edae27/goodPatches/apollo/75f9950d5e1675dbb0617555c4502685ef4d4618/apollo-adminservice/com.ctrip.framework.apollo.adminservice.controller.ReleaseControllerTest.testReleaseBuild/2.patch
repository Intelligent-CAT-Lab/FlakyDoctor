test_before_fix:
  public void testReleaseBuild() {
    String appId = "someAppId";
    AppDTO app =
        restTemplate.getForObject("http://localhost:" + port + "/apps/" + appId, AppDTO.class);

    ClusterDTO cluster = restTemplate.getForObject(
        "http://localhost:" + port + "/apps/" + app.getAppId() + "/clusters/default",
        ClusterDTO.class);

    NamespaceDTO namespace =
        restTemplate.getForObject("http://localhost:" + port + "/apps/" + app.getAppId()
            + "/clusters/" + cluster.getName() + "/namespaces/application", NamespaceDTO.class);

    Assert.assertEquals("someAppId", app.getAppId());
    Assert.assertEquals("default", cluster.getName());
    Assert.assertEquals("application", namespace.getNamespaceName());

    ItemDTO[] items =
        restTemplate.getForObject(
            "http://localhost:" + port + "/apps/" + app.getAppId() + "/clusters/"
                + cluster.getName() + "/namespaces/" + namespace.getNamespaceName() + "/items",
            ItemDTO[].class);
    Assert.assertEquals(3, items.length);

    HttpHeaders headers = new HttpHeaders();
    headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
    MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();
    parameters.add("name", "someReleaseName");
    parameters.add("comment", "someComment");
    parameters.add("operator", "test");
    HttpEntity<MultiValueMap<String, String>> entity =
        new HttpEntity<>(parameters, headers);
    ResponseEntity<ReleaseDTO> response = restTemplate.postForEntity(
        "http://localhost:" + port + "/apps/" + app.getAppId() + "/clusters/" + cluster.getName()
            + "/namespaces/" + namespace.getNamespaceName() + "/releases",
        entity, ReleaseDTO.class);
    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());
    ReleaseDTO release = response.getBody();
    Assert.assertEquals("someReleaseName", release.getName());
    Assert.assertEquals("someComment", release.getComment());
    Assert.assertEquals("someAppId", release.getAppId());
    Assert.assertEquals("default", release.getClusterName());
    Assert.assertEquals("application", release.getNamespaceName());

    Map<String, String> configurations = new HashMap<>();
    configurations.put("k1", "v1");
    configurations.put("k2", "v2");
    configurations.put("k3", "v3");

    Assert.assertEquals(GSON.toJson(configurations), release.getConfigurations());
  }

test_after_fix:

code:
public void testReleaseBuild() {  
      String appId = "someAppId";  
      AppDTO app =  
          restTemplate.getForObject("http://localhost:" + port + "/apps/" + appId, AppDTO.class);  
    
      ClusterDTO cluster = restTemplate.getForObject(  
          "http://localhost:" + port + "/apps/" + app.getAppId() + "/clusters/default",  
          ClusterDTO.class);  
    
      NamespaceDTO namespace =  
          restTemplate.getForObject("http://localhost:" + port + "/apps/" + app.getAppId()  
              + "/clusters/" + cluster.getName() + "/namespaces/application", NamespaceDTO.class);  
    
      Assert.assertEquals("someAppId", app.getAppId());  
      Assert.assertEquals("default", cluster.getName());  
      Assert.assertEquals("application", namespace.getNamespaceName());  
    
      ItemDTO[] items =  
          restTemplate.getForObject(  
              "http://localhost:" + port + "/apps/" + app.getAppId() + "/clusters/"  
                  + cluster.getName() + "/namespaces/" + namespace.getNamespaceName() + "/items",  
              ItemDTO[].class);  
      Assert.assertEquals(3, items.length);  
    
      HttpHeaders headers = new HttpHeaders();  
      headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);  
      MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();  
      parameters.add("name", "someReleaseName");  
      parameters.add("comment", "someComment");  
      parameters.add("operator", "test");  
      HttpEntity<MultiValueMap<String, String>> entity =  
          new HttpEntity<>(parameters, headers);  
      ResponseEntity<ReleaseDTO> response = restTemplate.postForEntity(  
          "http://localhost:" + port + "/apps/" + app.getAppId() + "/clusters/" + cluster.getName()  
              + "/namespaces/" + namespace.getNamespaceName() + "/releases",  
          entity, ReleaseDTO.class);  
      Assert.assertEquals(HttpStatus.OK, response.getStatusCode());  
      ReleaseDTO release = response.getBody();  
      Assert.assertEquals("someReleaseName", release.getName());  
      Assert.assertEquals("someComment", release.getComment());  
      Assert.assertEquals("someAppId", release.getAppId());  
      Assert.assertEquals("default", release.getClusterName());  
      Assert.assertEquals("application", release.getNamespaceName());  
    
      Map<String, String> configurations = new LinkedHashMap<>();  
      configurations.put("k1", "v1");  
      configurations.put("k2", "v2");  
      configurations.put("k3", "v3");  
    
      JsonParser parser = new JsonParser();  
      JsonElement o1 = parser.parse(GSON.toJson(configurations));  
      JsonElement o2 = parser.parse(release.getConfigurations());  
      Assert.assertEquals(o1, o2);  
  } 
 
import:
['import java.util.LinkedHashMap;\n ', 'import org.springframework.web.client.RestTemplate;\n ']
pom:
