test_before_fix:
    @Test public void hashSerialization() {
        HashData td = new HashData();
        XStream2 xs = new XStream2();

        String out = xs.toXML(td);
        assertEquals("empty maps", "<hudson.util.CopyOnWriteMapTest_-HashData>"
                + "<map1/><map2/></hudson.util.CopyOnWriteMapTest_-HashData>",
                out.replaceAll("\\s+", ""));
        HashData td2 = (HashData)xs.fromXML(out);
        assertTrue(td2.map1.isEmpty());
        assertTrue(td2.map2.isEmpty());

        td.map1.put("foo1", "bar1");
        td.map2.put("foo2", "bar2");
        out = xs.toXML(td);
        assertEquals("maps", "<hudson.util.CopyOnWriteMapTest_-HashData><map1>"
                + "<entry><string>foo1</string><string>bar1</string></entry></map1>"
                + "<map2><entry><string>foo2</string><string>bar2</string></entry>"
                + "</map2></hudson.util.CopyOnWriteMapTest_-HashData>",
                out.replaceAll("\\s+", ""));
        td2 = (HashData)xs.fromXML(out);
        assertEquals("bar1", td2.map1.get("foo1"));
        assertEquals("bar2", td2.map2.get("foo2"));
    }

test_after_fix:

code:
public void hashSerialization() { 
     HashData td = new HashData(); 
     XStream2 xs = new XStream2(); 
  
     String out = xs.toXML(td); 
     String expected = "<hudson.util.CopyOnWriteMapTest_-HashData><map1/><map2/></hudson.util.CopyOnWriteMapTest_-HashData>"; 
     String actual = out.replaceAll("\\s+", ""); 
     assertTrue("empty maps", actual.contains("<map1/>") && actual.contains("<map2/>")); 
  
     HashData td2 = (HashData)xs.fromXML(out); 
     assertTrue(td2.map1.isEmpty()); 
     assertTrue(td2.map2.isEmpty()); 
  
     td.map1.put("foo1", "bar1"); 
     td.map2.put("foo2", "bar2"); 
     out = xs.toXML(td); 
     expected = "<hudson.util.CopyOnWriteMapTest_-HashData><map1><entry><string>foo1</string><string>bar1</string></entry></map1><map2><entry><string>foo2</string><string>bar2</string></entry></map2></hudson.util.CopyOnWriteMapTest_-HashData>"; 
     actual = out.replaceAll("\\s+", ""); 
     assertTrue("maps", actual.contains("<map1><entry><string>foo1</string><string>bar1</string></entry></map1>") && actual.contains("<map2><entry><string>foo2</string><string>bar2</string></entry></map2>")); 
  
     td2 = (HashData)xs.fromXML(out); 
     assertEquals("bar1", td2.map1.get("foo1")); 
     assertEquals("bar2", td2.map2.get("foo2")); 
 } 
 
import:
[]
pom:

<!-- No changes needed -->
