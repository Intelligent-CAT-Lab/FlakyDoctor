test_before_fix:
  public void CustomDataParametersTest() {

    // ARRANGE
    APIContext context = new APIContext("ACCESS_TOKEN").enableDebug(true);

    UserData userData = new UserData()
            .email("abc@eg.com");

    HashMap<String, String> customProperties = new HashMap<String, String>();
    customProperties.put("Key1", "Value1");
    customProperties.put("Key2", "Value2");

    List<Content> contents = new ArrayList<Content>();
    contents.add(new Content().productId("1").brand("brandA"));
    contents.add(new Content().productId("2").brand("brandB"));

    List<String> contentIds = new ArrayList<String>();
    contentIds.add("123");
    contentIds.add("456");

    String contentCategory = "content_categoryA";
    String contentName = "content_nameA";
    String currency = "USD";

    CustomData customData = new CustomData()
            .contentIds(contentIds)
            .customProperties(customProperties)
            .contents(contents)
            .contentCategory(contentCategory)
            .contentName(contentName)
            .currency(currency)
            .deliveryCategory(DeliveryCategory.curbside)
            .value(123.45F);

    Event testEvent = new Event();
    testEvent.eventName("Purchase")
            .eventTime(System.currentTimeMillis() / 1000L)
            .userData(userData)
            .dataProcessingOptions(new String[]{})
            .customData(customData);

    EventRequest eventRequest = new EventRequest("123", context);
    eventRequest.addDataItem(testEvent);

    // ACT
    String serializedPayload = eventRequest.getSerializedPayload();

    // ASSERT
    String cpString = (new Gson()).toJson(customProperties);
    String serializedContents = (new Gson()).toJson(contents);
    String serializedContentIds = (new Gson()).toJson(contentIds);
    Assert.assertTrue(serializedPayload.contains(cpString.substring(1, cpString.length() - 1)));
    Assert.assertTrue(serializedPayload.contains(serializedContents));
    Assert.assertTrue(serializedPayload.contains(serializedContentIds));
    Assert.assertTrue(serializedPayload.contains(currency.toLowerCase()));
    Assert.assertTrue(serializedPayload.contains(contentCategory));
    Assert.assertTrue(serializedPayload.contains(contentName));
    Assert.assertTrue(serializedPayload.contains(DeliveryCategory.curbside.toString()));
  }

test_after_fix:

code:
public void CustomDataParametersTest() { 
  
     // ARRANGE     
     APIContext context = new APIContext("ACCESS_TOKEN").enableDebug(true); 
  
     UserData userData = new UserData() 
             .email("abc@eg.com"); 
  
     LinkedHashMap<String, String> customProperties = new LinkedHashMap<String, String>(); 
     customProperties.put("Key1", "Value1"); 
     customProperties.put("Key2", "Value2"); 
  
     List<Content> contents = new ArrayList<Content>(); 
     contents.add(new Content().productId("1").brand("brandA")); 
     contents.add(new Content().productId("2").brand("brandB")); 
  
     List<String> contentIds = new ArrayList<String>(); 
     contentIds.add("123"); 
     contentIds.add("456"); 
  
     String contentCategory = "content_categoryA"; 
     String contentName = "content_nameA"; 
     String currency = "USD"; 
  
     CustomData customData = new CustomData() 
             .contentIds(contentIds) 
             .customProperties(customProperties) 
             .contents(contents) 
             .contentCategory(contentCategory) 
             .contentName(contentName) 
             .currency(currency) 
             .deliveryCategory(DeliveryCategory.curbside) 
             .value(123.45F); 
  
     Event testEvent = new Event(); 
     testEvent.eventName("Purchase") 
             .eventTime(System.currentTimeMillis() / 1000L) 
             .userData(userData) 
             .dataProcessingOptions(new String[]{}) 
             .customData(customData); 
  
     EventRequest eventRequest = new EventRequest("123", context); 
     eventRequest.addDataItem(testEvent); 
  
     // ACT     
     String serializedPayload = eventRequest.getSerializedPayload(); 
  
     // ASSERT     
     Gson gson = new GsonBuilder().create(); 
     Type type = new TypeToken<LinkedHashMap<String, String>>(){}.getType(); 
     String cpString = gson.toJson(customProperties, type); 
     String serializedContents = gson.toJson(contents); 
     String serializedContentIds = gson.toJson(contentIds); 
  
     JsonParser parser = new JsonParser(); 
     JsonObject payloadJson = parser.parse(serializedPayload).getAsJsonObject(); 
     JsonObject customPropertiesJson = parser.parse(cpString).getAsJsonObject(); 
     JsonArray contentsJson = parser.parse(serializedContents).getAsJsonArray(); 
     JsonArray contentIdsJson = parser.parse(serializedContentIds).getAsJsonArray(); 
  
     Assert.assertEquals(payloadJson.get("customProperties"), customPropertiesJson); 
     Assert.assertEquals(payloadJson.get("contents"), contentsJson); 
     Assert.assertEquals(payloadJson.get("contentIds"), contentIdsJson); 
     Assert.assertEquals(payloadJson.get("currency").getAsString().toLowerCase(), currency.toLowerCase()); 
     Assert.assertEquals(payloadJson.get("contentCategory").getAsString(), contentCategory); 
     Assert.assertEquals(payloadJson.get("contentName").getAsString(), contentName); 
     Assert.assertEquals(payloadJson.get("deliveryCategory").getAsString(), "curbside"); 
 } 
 
import:
['import com.google.gson.JsonArray;\n ', 'import com.google.gson.JsonObject;\n ', 'import com.google.gson.JsonParser;\n ']
pom:
