test_before_fix:
    public void testJvmMethodSorter() {
        Method[] fromJvmWithSynthetics = DummySortJvm.class.getDeclaredMethods();
        Method[] sorted = MethodSorter.getDeclaredMethods(DummySortJvm.class);
        assertArrayEquals(fromJvmWithSynthetics, sorted);
    }

test_after_fix:

code:
 
  
 public void testJvmMethodSorter() { 
     Method[] fromJvmWithSynthetics = DummySortJvm.class.getDeclaredMethods(); 
     Method[] sorted = MethodSorter.getDeclaredMethods(DummySortJvm.class); 
     List<Method> fromJvmWithSyntheticsList = new ArrayList<Method>(Arrays.asList(fromJvmWithSynthetics)); 
     List<Method> sortedList = new ArrayList<Method>(Arrays.asList(sorted)); 
     Collections.sort(fromJvmWithSyntheticsList, new Comparator<Method>() { 
         @Override 
         public int compare(Method o1, Method o2) { 
             int nameComparison = o1.getName().compareTo(o2.getName()); 
             if (nameComparison != 0) { 
                 return nameComparison; 
             } else { 
                 return o1.toString().compareTo(o2.toString()); 
             } 
         } 
     }); 
     Collections.sort(sortedList, new Comparator<Method>() { 
         @Override 
         public int compare(Method o1, Method o2) { 
             int nameComparison = o1.getName().compareTo(o2.getName()); 
             if (nameComparison != 0) { 
                 return nameComparison; 
             } else { 
                 return o1.toString().compareTo(o2.toString()); 
             } 
         } 
     }); 
     assertArrayEquals(fromJvmWithSyntheticsList.toArray(), sortedList.toArray()); 
 } 
  
  
 
import:
[]
pom:
