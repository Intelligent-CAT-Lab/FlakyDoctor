test_before_fix:
    public void testSendQueryParams() throws Exception {

        HttpResponse resp = new BasicHttpResponse(
            new BasicStatusLine(HttpVersion.HTTP_1_1, 200, "OK"));
        BasicHttpEntity entity = new BasicHttpEntity();
        entity.setContent(new ByteArrayInputStream("test payload".getBytes()));
        resp.setEntity(entity);
        Mockito.doReturn(resp).when(mockSdkClient)
               .execute(any(HttpUriRequest.class), any(HttpContext.class));

        // add dynamic property
        runner.setProperty("dynamicHeader", "yes!");
        runner.setProperty(InvokeAWSGatewayApi.PROP_QUERY_PARAMS, "apples=oranges&dogs=cats");

        // set the regex
        runner.setProperty(InvokeAWSGatewayApi.PROP_ATTRIBUTES_TO_SEND, "F.*");

        final Map<String, String> attributes = new HashMap<>();
        attributes.put(CoreAttributes.MIME_TYPE.key(), "application/plain-text");
        attributes.put("Foo", "Bar");
        runner.enqueue("Hello".getBytes("UTF-8"), attributes);
        // execute
        runner.assertValid();
        runner.run(1);

        Mockito.verify(mockSdkClient, times(1))
                .execute(argThat(argument -> argument.getMethod().equals("GET")
                                && argument.getFirstHeader("x-api-key").getValue().equals("abcd")
                                && argument.getFirstHeader("Authorization").getValue().startsWith("AWS4")
                                && argument.getFirstHeader("dynamicHeader").getValue().equals("yes!")
                                && argument.getFirstHeader("Foo").getValue().equals("Bar")
                                && argument.getURI().toString().equals("https://foobar.execute-api.us-east-1.amazonaws.com/TEST?dogs=cats&apples=oranges")),
                        any(HttpContext.class));
        // check
        runner.assertTransferCount(InvokeAWSGatewayApi.REL_SUCCESS_REQ, 1);
        runner.assertTransferCount(InvokeAWSGatewayApi.REL_RESPONSE, 1);
        runner.assertTransferCount(InvokeAWSGatewayApi.REL_RETRY, 0);
        runner.assertTransferCount(InvokeAWSGatewayApi.REL_NO_RETRY, 0);
        runner.assertTransferCount(InvokeAWSGatewayApi.REL_FAILURE, 0);

        final List<MockFlowFile> flowFiles = runner
            .getFlowFilesForRelationship(InvokeAWSGatewayApi.REL_RESPONSE);
        final MockFlowFile ff0 = flowFiles.get(0);

        ff0.assertAttributeEquals(InvokeAWSGatewayApi.STATUS_CODE, "200");
        ff0.assertContentEquals("test payload");
        ff0.assertAttributeExists(InvokeAWSGatewayApi.TRANSACTION_ID);
        ff0.assertAttributeEquals(InvokeAWSGatewayApi.RESOURCE_NAME_ATTR, "/TEST");
    }

test_after_fix:

code:
public void testSendQueryParams() throws Exception {  
  
      HttpResponse resp = new BasicHttpResponse(  
          new BasicStatusLine(HttpVersion.HTTP_1_1, 200, "OK"));  
      BasicHttpEntity entity = new BasicHttpEntity();  
      entity.setContent(new ByteArrayInputStream("test payload".getBytes()));  
      resp.setEntity(entity);  
      Mockito.doReturn(resp).when(mockSdkClient)  
             .execute(any(HttpUriRequest.class), any(HttpContext.class));  
  
      // add dynamic property  
      runner.setProperty("dynamicHeader", "yes!");  
      runner.setProperty(InvokeAWSGatewayApi.PROP_QUERY_PARAMS, "apples=oranges&dogs=cats");  
  
      // set the regex  
      runner.setProperty(InvokeAWSGatewayApi.PROP_ATTRIBUTES_TO_SEND, "F.*");  
  
      final Map<String, String> attributes = new LinkedHashMap<>();  
      attributes.put(CoreAttributes.MIME_TYPE.key(), "application/plain-text");  
      attributes.put("Foo", "Bar");  
      runner.enqueue("Hello".getBytes("UTF-8"), attributes);  
      // execute  
      runner.assertValid();  
      runner.run(1);  
  
      Mockito.verify(mockSdkClient, times(1))  
              .execute(argThat(argument -> argument.getMethod().equals("GET")  
                              && argument.getFirstHeader("x-api-key").getValue().equals("abcd")  
                              && argument.getFirstHeader("Authorization").getValue().startsWith("AWS4")  
                              && argument.getFirstHeader("dynamicHeader").getValue().equals("yes!")  
                              && argument.getFirstHeader("Foo").getValue().equals("Bar")  
                              && argument.getURI().toString().contains("https://foobar.execute-api.us-east-1.amazonaws.com/TEST") 
                              && argument.getURI().toString().contains("apples=oranges") 
                              && argument.getURI().toString().contains("dogs=cats")),  
                      any(HttpContext.class));  
      // check  
      runner.assertTransferCount(InvokeAWSGatewayApi.REL_SUCCESS_REQ, 1);  
      runner.assertTransferCount(InvokeAWSGatewayApi.REL_RESPONSE, 1);  
      runner.assertTransferCount(InvokeAWSGatewayApi.REL_RETRY, 0);  
      runner.assertTransferCount(InvokeAWSGatewayApi.REL_NO_RETRY, 0);  
      runner.assertTransferCount(InvokeAWSGatewayApi.REL_FAILURE, 0);  
  
      final List<MockFlowFile> flowFiles = runner  
          .getFlowFilesForRelationship(InvokeAWSGatewayApi.REL_RESPONSE);  
      final MockFlowFile ff0 = flowFiles.get(0);  
  
      ff0.assertAttributeEquals(InvokeAWSGatewayApi.STATUS_CODE, "200");  
      ff0.assertContentEquals("test payload");  
      ff0.assertAttributeExists(InvokeAWSGatewayApi.TRANSACTION_ID);  
      ff0.assertAttributeEquals(InvokeAWSGatewayApi.RESOURCE_NAME_ATTR, "/TEST");  
  } 
 
import:
[]
pom:
