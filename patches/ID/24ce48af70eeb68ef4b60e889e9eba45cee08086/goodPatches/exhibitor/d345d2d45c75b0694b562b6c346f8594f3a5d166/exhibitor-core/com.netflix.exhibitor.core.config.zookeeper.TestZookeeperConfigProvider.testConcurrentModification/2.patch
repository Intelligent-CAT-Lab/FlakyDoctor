test_before_fix:
    public void testConcurrentModification() throws Exception
    {
        ZookeeperConfigProvider config1 = new ZookeeperConfigProvider(client, "/foo", new Properties(), "foo");
        ZookeeperConfigProvider config2 = new ZookeeperConfigProvider(client, "/foo", new Properties(), "foo");
        try
        {
            config1.start();
            config2.start();

            final Semaphore     cacheUpdate2 = new Semaphore(0);
            config2.getPathChildrenCache().getListenable().addListener
            (
                new PathChildrenCacheListener()
                {
                    @Override
                    public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception
                    {
                        cacheUpdate2.release();
                    }
                }
            );

            Properties              properties = new Properties();
            properties.setProperty(PropertyBasedInstanceConfig.toName(StringConfigs.ZOO_CFG_EXTRA, PropertyBasedInstanceConfig.ROOT_PROPERTY_PREFIX), "1,2,3");
            LoadedInstanceConfig    loaded1 = config1.storeConfig(new PropertyBasedInstanceConfig(properties, new Properties()), -1);

            Assert.assertTrue(timing.acquireSemaphore(cacheUpdate2));
            timing.sleepABit();

            LoadedInstanceConfig    loaded2 = config2.loadConfig();
            Assert.assertEquals("1,2,3", loaded2.getConfig().getRootConfig().getString(StringConfigs.ZOO_CFG_EXTRA));

            properties.setProperty(PropertyBasedInstanceConfig.toName(StringConfigs.ZOO_CFG_EXTRA, PropertyBasedInstanceConfig.ROOT_PROPERTY_PREFIX), "4,5,6");
            config2.storeConfig(new PropertyBasedInstanceConfig(properties, new Properties()), loaded2.getVersion());

            Assert.assertNull(config1.storeConfig(new PropertyBasedInstanceConfig(properties, new Properties()), loaded1.getVersion()));

            LoadedInstanceConfig    newLoaded1 = config1.loadConfig();
            Assert.assertNotEquals(loaded1.getVersion(), newLoaded1.getVersion());
        }
        finally
        {
            CloseableUtils.closeQuietly(config2);
            CloseableUtils.closeQuietly(config1);
        }
    }

test_after_fix:

code:
 
  
 public void testConcurrentModification() throws Exception  
 {  
     ReentrantLock lock = new ReentrantLock();  
     ZookeeperConfigProvider config1 = new ZookeeperConfigProvider(client, "/foo", new Properties(), "foo");  
     ZookeeperConfigProvider config2 = new ZookeeperConfigProvider(client, "/foo", new Properties(), "foo");  
     try  
     {  
         config1.start();  
         config2.start();  
  
         final Semaphore cacheUpdate2 = new Semaphore(0);  
         config2.getPathChildrenCache().getListenable().addListener  
         (  
             new PathChildrenCacheListener()  
             {  
                 @Override  
                 public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception  
                 {  
                     cacheUpdate2.release();  
                 }  
             }  
         );  
  
         Properties properties = new Properties();  
         properties.setProperty(PropertyBasedInstanceConfig.toName(StringConfigs.ZOO_CFG_EXTRA, PropertyBasedInstanceConfig.ROOT_PROPERTY_PREFIX), "1,2,3");  
         lock.lock();  
         LoadedInstanceConfig loaded1 = config1.storeConfig(new PropertyBasedInstanceConfig(properties, new Properties()), -1);  
         lock.unlock();  
  
         Assert.assertTrue(timing.acquireSemaphore(cacheUpdate2));  
         timing.sleepABit();  
  
         lock.lock();  
         LoadedInstanceConfig loaded2 = config2.loadConfig();  
         lock.unlock();  
         Assert.assertEquals("1,2,3", loaded2.getConfig().getRootConfig().getString(StringConfigs.ZOO_CFG_EXTRA));  
  
         properties.setProperty(PropertyBasedInstanceConfig.toName(StringConfigs.ZOO_CFG_EXTRA, PropertyBasedInstanceConfig.ROOT_PROPERTY_PREFIX), "4,5,6");  
         lock.lock();  
         config2.storeConfig(new PropertyBasedInstanceConfig(properties, new Properties()), loaded2.getVersion());  
         lock.unlock();  
  
         lock.lock();  
         Assert.assertNull(config1.storeConfig(new PropertyBasedInstanceConfig(properties, new Properties()), loaded1.getVersion()));  
         lock.unlock();  
  
         timing.sleepABit(); 
  
         lock.lock();  
         LoadedInstanceConfig newLoaded1 = config1.loadConfig();  
         lock.unlock();  
         Assert.assertNotEquals(loaded1.getVersion(), newLoaded1.getVersion());  
     }  
     finally  
     {  
         CloseableUtils.closeQuietly(config2);  
         CloseableUtils.closeQuietly(config1);  
     }  
 } 
  
  
 
import:
['import com.netflix.exhibitor.core.config.zookeeper.ZookeeperConfigProvider;\n ']
pom:
